{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Aye Aye Service API",
    "description": "Node.js and Express.js Application API",
    "license": {
      "name": "SDNA",
      "url": "https://sdnatech.com/"
    }
  },
  "basePath": "/api/",
  "tags": [
    {
      "name": "Test Configuration"
    },
    {
      "name": "AWS Rekognition"
    },
    {
      "name": "AWS Media Convert"
    },
    {
      "name": "Azure Video Indexer"
    },
    {
      "name": "Azure Computer Vision"
    },
    {
      "name": "Azure Document Intelligence"
    },
    {
      "name": "GCS Vision AI"
    },
    {
      "name": "GCS Video Intelligence"
    },
    {
      "name": "GCS Document Intelligence"
    },
    {
      "name": "GCS Transcode API"
    },
    {
      "name": "Rev AI Transcription"
    },
    {
      "name": "Twelve Labs"
    },
    {
      "name": "Configuration"
    },
    {
      "name": "Result"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/AWS/rekognition/image/analyzeSingle": {
      "post": {
        "description": "Analyze a single image stored in an AWS S3 bucket using AWS Rekognition APIs. This endpoint processes the image by analyzing it for features like labels, faces, text, celebrities, content moderation, or safety equipment based on the specified analysis type.",
        "summary": "Analyze a single image using AWS Rekognition",
        "tags": [
          "AWS Rekognition"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "description": "Request parameters for single image analysis",
            "schema": {
              "type": "object",
              "properties": {
                "jobGuid": {
                  "type": "string",
                  "description": "Unique identifier for tracking the analysis job",
                  "required": true
                },
                "configName": {
                  "type": "string",
                  "description": "Name of the AWS configuration to use for authentication",
                  "required": true
                },
                "analysisType": {
                  "type": "string",
                  "description": "Type of analysis to perform on the image",
                  "enum": [
                    "LABEL_DETECTION",
                    "CONTENT_MODERATION",
                    "CELEBRITY_RECOGNITION",
                    "FACE_DETECTION",
                    "TEXT_DETECTION",
                    "SAFETY_EQUIPMENT_ANALYSIS"
                  ],
                  "required": true
                },
                "bucketName": {
                  "type": "string",
                  "description": "Name of the S3 bucket containing the image",
                  "required": true
                },
                "filePath": {
                  "type": "string",
                  "description": "S3 object key of the image to analyze (e.g. 'folder/image.jpg')",
                  "required": true
                },
                "params": {
                  "type": "object",
                  "description": "Additional parameters specific to the analysis type"
                }
              },
              "required": [
                "jobGuid",
                "configName",
                "analysisType",
                "bucketName",
                "filePath"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Image analysis request successfully submitted",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "$ref": "#/definitions/rekognitionAnalyzeSingleFileRequest"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "500": {
            "description": "Internal server error or AWS Rekognition service error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          }
        }
      }
    },
    "/v1/AWS/rekognition/image/analyzeMultiple": {
      "post": {
        "description": "Analyze multiple images stored in an AWS S3 bucket using AWS Rekognition APIs. This endpoint processes images in batch by analyzing them for features like labels, faces, text, celebrities, content moderation, or safety equipment based on the specified analysis type.",
        "summary": "Batch analyze images using AWS Rekognition",
        "tags": [
          "AWS Rekognition"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "description": "Request parameters for batch image analysis",
            "schema": {
              "type": "object",
              "properties": {
                "jobGuid": {
                  "type": "string",
                  "description": "Unique identifier for tracking the batch analysis job",
                  "required": true
                },
                "configName": {
                  "type": "string",
                  "description": "Name of the AWS configuration to use for authentication",
                  "required": true
                },
                "analysisType": {
                  "type": "string",
                  "description": "Type of analysis to perform on the images",
                  "enum": [
                    "LABEL_DETECTION",
                    "CONTENT_MODERATION",
                    "CELEBRITY_RECOGNITION",
                    "FACE_DETECTION",
                    "TEXT_DETECTION",
                    "SAFETY_EQUIPMENT_ANALYSIS"
                  ],
                  "required": true
                },
                "bucketName": {
                  "type": "string",
                  "description": "Name of the S3 bucket containing the images",
                  "required": true
                },
                "filePaths": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "S3 object keys of images to analyze (e.g. 'folder/image.jpg')"
                  },
                  "required": true
                },
                "params": {
                  "type": "object",
                  "description": "Additional parameters specific to the analysis type"
                }
              },
              "required": [
                "jobGuid",
                "configName",
                "analysisType",
                "bucketName",
                "filePaths"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Batch analysis request successfully submitted",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "$ref": "#/definitions/rekognitionAnalyzeFolderRequest"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "500": {
            "description": "Internal server error or AWS Rekognition service error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          }
        }
      }
    },
    "/v1/AWS/rekognition/image/analyzeFolder": {
      "post": {
        "description": "Analyze all images within a specific folder in an AWS S3 bucket using AWS Rekognition APIs. This endpoint processes images by analyzing them for features like labels, faces, text, celebrities, content moderation, or safety equipment based on the specified analysis type.",
        "summary": "Analyze all images in an S3 folder using AWS Rekognition",
        "tags": [
          "AWS Rekognition"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "description": "Request parameters for folder image analysis",
            "schema": {
              "type": "object",
              "properties": {
                "jobGuid": {
                  "type": "string",
                  "description": "Unique identifier for tracking the analysis job",
                  "required": true
                },
                "configName": {
                  "type": "string",
                  "description": "Name of the AWS configuration to use for authentication",
                  "required": true
                },
                "analysisType": {
                  "type": "string",
                  "description": "Type of analysis to perform on the images",
                  "enum": [
                    "LABEL_DETECTION",
                    "CONTENT_MODERATION",
                    "CELEBRITY_RECOGNITION",
                    "FACE_DETECTION",
                    "TEXT_DETECTION",
                    "SAFETY_EQUIPMENT_ANALYSIS"
                  ],
                  "required": true
                },
                "bucketName": {
                  "type": "string",
                  "description": "Name of the S3 bucket containing the images",
                  "required": true
                },
                "folderPath": {
                  "type": "string",
                  "description": "S3 folder prefix path containing the images to analyze (e.g. 'images/')",
                  "required": true
                },
                "params": {
                  "type": "object",
                  "description": "Additional parameters specific to the analysis type"
                }
              },
              "required": [
                "jobGuid",
                "configName",
                "analysisType",
                "bucketName",
                "folderPath"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Folder analysis request successfully submitted",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "$ref": "#/definitions/rekognitionAnalyzeFolderRequest"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "500": {
            "description": "Internal server error or AWS Rekognition service error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          }
        }
      }
    },
    "/v1/AWS/rekognition/video/analyzeSingle": {
      "post": {
        "description": "Analyze a single video stored in an AWS S3 bucket using AWS Rekognition APIs. This endpoint processes the video by analyzing it for features like labels, faces, text, celebrities, content moderation, or person tracking based on the specified analysis type.",
        "summary": "Analyze a single video using AWS Rekognition",
        "tags": [
          "AWS Rekognition"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "description": "Request parameters for single video analysis",
            "schema": {
              "type": "object",
              "properties": {
                "jobGuid": {
                  "type": "string",
                  "description": "Unique identifier for tracking the analysis job",
                  "required": true
                },
                "configName": {
                  "type": "string",
                  "description": "Name of the AWS configuration to use for authentication",
                  "required": true
                },
                "analysisType": {
                  "type": "string",
                  "description": "Type of analysis to perform on the video",
                  "enum": [
                    "LABEL_DETECTION",
                    "CONTENT_MODERATION",
                    "CELEBRITY_RECOGNITION",
                    "TEXT_DETECTION",
                    "FACE_DETECTION",
                    "PERSON_TRACKING"
                  ],
                  "required": true
                },
                "bucketName": {
                  "type": "string",
                  "description": "Name of the S3 bucket containing the video",
                  "required": true
                },
                "filePath": {
                  "type": "string",
                  "description": "S3 object key of the video to analyze (e.g. 'folder/video.mp4')",
                  "required": true
                },
                "params": {
                  "type": "object",
                  "description": "Additional parameters specific to the analysis type"
                }
              },
              "required": [
                "jobGuid",
                "configName",
                "analysisType",
                "bucketName",
                "filePath"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Video analysis request successfully submitted",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "$ref": "#/definitions/rekognitionAnalyzeSingleFileRequest"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "500": {
            "description": "Internal server error or AWS Rekognition service error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          }
        }
      }
    },
    "/v1/AWS/rekognition/video/analyzeMultiple": {
      "post": {
        "description": "Analyze multiple videos stored in an AWS S3 bucket using AWS Rekognition APIs. This endpoint processes videos in batch by analyzing them for features like labels, faces, text, celebrities, content moderation, or person tracking based on the specified analysis type.",
        "summary": "Batch analyze videos using AWS Rekognition",
        "tags": [
          "AWS Rekognition"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "description": "Request parameters for batch video analysis",
            "schema": {
              "type": "object",
              "properties": {
                "jobGuid": {
                  "type": "string",
                  "description": "Unique identifier for tracking the batch analysis job",
                  "required": true
                },
                "configName": {
                  "type": "string",
                  "description": "Name of the AWS configuration to use for authentication",
                  "required": true
                },
                "analysisType": {
                  "type": "string",
                  "description": "Type of analysis to perform on the videos",
                  "enum": [
                    "LABEL_DETECTION",
                    "CONTENT_MODERATION",
                    "CELEBRITY_RECOGNITION",
                    "TEXT_DETECTION",
                    "FACE_DETECTION",
                    "PERSON_TRACKING"
                  ],
                  "required": true
                },
                "bucketName": {
                  "type": "string",
                  "description": "Name of the S3 bucket containing the videos",
                  "required": true
                },
                "filePaths": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "S3 object keys of videos to analyze (e.g. 'folder/video.mp4')"
                  },
                  "required": true
                },
                "params": {
                  "type": "object",
                  "description": "Additional parameters specific to the analysis type"
                }
              },
              "required": [
                "jobGuid",
                "configName",
                "analysisType",
                "bucketName",
                "filePaths"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Batch video analysis request successfully submitted",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "$ref": "#/definitions/rekognitionAnalyzeFolderRequest"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "500": {
            "description": "Internal server error or AWS Rekognition service error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          }
        }
      }
    },
    "/v1/AWS/rekognition/video/analyzeFolder": {
      "post": {
        "description": "Analyze all videos within a specific folder in an AWS S3 bucket using AWS Rekognition APIs. This endpoint processes videos by analyzing them for features like labels, faces, text, celebrities, content moderation, or person tracking based on the specified analysis type.",
        "summary": "Analyze all videos in an S3 folder using AWS Rekognition",
        "tags": [
          "AWS Rekognition"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "description": "Request parameters for folder video analysis",
            "schema": {
              "type": "object",
              "properties": {
                "jobGuid": {
                  "type": "string",
                  "description": "Unique identifier for tracking the analysis job",
                  "required": true
                },
                "configName": {
                  "type": "string",
                  "description": "Name of the AWS configuration to use for authentication",
                  "required": true
                },
                "analysisType": {
                  "type": "string",
                  "description": "Type of analysis to perform on the videos",
                  "enum": [
                    "LABEL_DETECTION",
                    "CONTENT_MODERATION",
                    "CELEBRITY_RECOGNITION",
                    "TEXT_DETECTION",
                    "FACE_DETECTION",
                    "PERSON_TRACKING"
                  ],
                  "required": true
                },
                "bucketName": {
                  "type": "string",
                  "description": "Name of the S3 bucket containing the videos",
                  "required": true
                },
                "folderPath": {
                  "type": "string",
                  "description": "S3 folder prefix path containing the videos to analyze (e.g. 'videos/')",
                  "required": true
                },
                "params": {
                  "type": "object",
                  "description": "Additional parameters specific to the analysis type"
                }
              },
              "required": [
                "jobGuid",
                "configName",
                "analysisType",
                "bucketName",
                "folderPath"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Folder video analysis request successfully submitted",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "$ref": "#/definitions/rekognitionAnalyzeFolderRequest"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "500": {
            "description": "Internal server error or AWS Rekognition service error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          }
        }
      }
    },
    "/v1/AWS/mediaConvert/addJob": {
      "post": {
        "description": "Send a request to AWS Media Convert to transcode video files to desired format and quality",
        "summary": "Add Job to AWS Elemental Media Convert",
        "tags": [
          "AWS Media Convert"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "description": "Request payload for submitting a new transcoding job to MediaConvert. Specify the job configuration using a template name, provide destination parameters for output location, and include detailed job settings in jobData. Each job must have a unique jobGuid for tracking. The configName determines which AWS credentials and settings to use for processing.",
            "schema": {
              "type": "object",
              "properties": {
                "jobGuid": {
                  "type": "string",
                  "description": "Unique identifier for the job"
                },
                "configName": {
                  "type": "string",
                  "description": "Name of the AWS MediaConvert configuration to use",
                  "required": true
                },
                "templateName": {
                  "type": "string",
                  "description": "Name of the job template to use. Templates contain encoding settings.",
                  "required": true
                },
                "destinationParams": {
                  "type": "string",
                  "description": "S3 destination path parameters for output files"
                },
                "jobData": {
                  "type": "object",
                  "description": "Job settings including input/output configurations, encoding settings, and job metadata"
                }
              },
              "required": [
                "jobGuid",
                "configName",
                "templateName",
                "destinationParams",
                "jobData"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Job successfully submitted to MediaConvert",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "$ref": "#/definitions/mediaConvertAddJobRequest"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid job settings or parameters",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "500": {
            "description": "Internal server error or MediaConvert service error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          }
        }
      }
    },
    "/v1/AWS/mediaConvert/cancelJob": {
      "post": {
        "description": "Remove a recently added or already running job at AWS Media Convert. This endpoint allows you to cancel an ongoing job by providing the job's unique identifiers. The job status must be one of: SUBMITTED, PROGRESSING, or CANCELED. Jobs that are already COMPLETE or ERROR cannot be canceled.",
        "summary": "Cancel an ongoing Job",
        "tags": [
          "AWS Media Convert"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "description": "Request payload for canceling an ongoing MediaConvert job. Requires both the client-generated jobGuid and AWS-generated jobId for secure job identification. Only jobs in SUBMITTED or PROGRESSING states can be canceled. The configName should match the one used when creating the job. The operation is irreversible once successful.",
            "schema": {
              "type": "object",
              "properties": {
                "jobGuid": {
                  "type": "string",
                  "description": "The globally unique identifier for the job. This is a client-generated GUID that helps track the job across systems."
                },
                "configName": {
                  "type": "string",
                  "description": "The name of the AWS MediaConvert configuration to use. This should match the configuration used when creating the job."
                },
                "jobId": {
                  "type": "string",
                  "description": "The unique identifier assigned by AWS MediaConvert when the job was created. Required to identify the specific job to cancel."
                }
              },
              "required": [
                "jobGuid",
                "jobId"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Job successfully canceled",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "$ref": "#/definitions/mediaConvertJobCancelRequest"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "404": {
            "description": "Job not found",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          }
        }
      }
    },
    "/v1/AWS/mediaConvert/getPresets": {
      "post": {
        "description": "Retrieve AWS MediaConvert presets which contain pre-configured encoding settings for specific output formats. Get a single preset by name or list multiple presets with filtering options. Presets help standardize output configurations across multiple transcoding jobs.",
        "summary": "Get or List AWS MediaConvert Presets",
        "tags": [
          "AWS Media Convert"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "Request payload for retrieving preset details. Use this to either get a specific preset by name or retrieve multiple presets with filtering options like category, sort order, and pagination. The configName determines which AWS credentials to use for accessing the MediaConvert service.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "configName": {
                  "type": "string",
                  "description": "Name of the AWS IAM credentials configuration to use for authentication",
                  "required": true
                },
                "presetName": {
                  "type": "string",
                  "description": "Name of a specific preset to retrieve. If omitted, returns multiple presets based on searchOptions"
                },
                "searchOptions": {
                  "type": "object",
                  "properties": {
                    "category": {
                      "type": "string",
                      "description": "Filter presets by user-defined category"
                    },
                    "listBy": {
                      "type": "string",
                      "description": "Criteria for listing presets",
                      "enum": [
                        "NAME",
                        "CREATION_DATE",
                        "SYSTEM"
                      ]
                    },
                    "maxResults": {
                      "type": "integer",
                      "description": "Maximum number of presets to return per request (1-20)",
                      "minimum": 1,
                      "maximum": 20
                    },
                    "order": {
                      "type": "string",
                      "description": "Sort order for results",
                      "enum": [
                        "ASCENDING",
                        "DESCENDING"
                      ]
                    }
                  },
                  "description": "Options for filtering and paginating preset results"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved preset(s)",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "$ref": "#/definitions/mediaConvertPresetResponseTemplate"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "404": {
            "description": "Preset not found",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          }
        }
      }
    },
    "/v1/AWS/mediaConvert/getTemplates": {
      "post": {
        "description": "Retrieve AWS MediaConvert templates which contain pre-configured encoding settings for specific output formats. Get a single template by name or list multiple templates with filtering options. Templates help standardize output configurations across multiple transcoding jobs.",
        "summary": "Get or List AWS MediaConvert Templates",
        "tags": [
          "AWS Media Convert"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "description": "Request payload for retrieving MediaConvert templates. You can either fetch a specific template by name or list multiple templates using search options. The search options allow filtering by category, sorting by creation date or name, and pagination control. Templates define complete transcoding settings that can be reused across multiple jobs.",
            "schema": {
              "type": "object",
              "properties": {
                "configName": {
                  "type": "string",
                  "description": "Name of the AWS IAM credentials configuration to use for authentication",
                  "required": true
                },
                "templateName": {
                  "type": "string",
                  "description": "Name of a specific template to retrieve. If omitted, returns multiple templates based on searchOptions"
                },
                "searchOptions": {
                  "type": "object",
                  "properties": {
                    "category": {
                      "type": "string",
                      "description": "Filter templates by user-defined category"
                    },
                    "listBy": {
                      "type": "string",
                      "description": "Criteria for listing templates",
                      "enum": [
                        "NAME",
                        "CREATION_DATE",
                        "SYSTEM"
                      ]
                    },
                    "maxResults": {
                      "type": "integer",
                      "description": "Maximum number of templates to return per request (1-20)",
                      "minimum": 1,
                      "maximum": 20
                    },
                    "order": {
                      "type": "string",
                      "description": "Sort order for results",
                      "enum": [
                        "ASCENDING",
                        "DESCENDING"
                      ]
                    }
                  },
                  "description": "Options for filtering and paginating template results"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "$ref": "#/definitions/mediaConvertTemplateResponseTemplate"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          }
        }
      }
    },
    "/v1/AWS/mediaConvert/getJobDetails": {
      "post": {
        "description": "Retrieve details about a specific job by providing its ID or list all jobs. This endpoint allows you to get detailed information about AWS MediaConvert jobs.",
        "summary": "Get or List Details of Jobs for AWS MediaConvert",
        "tags": [
          "AWS Media Convert"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "description": "Request payload for retrieving MediaConvert job details. You can either get details of a specific job using its ID or list multiple jobs using search options. The search options support filtering by status, queue, and custom criteria, with pagination and sorting capabilities. This helps in tracking and monitoring transcoding job progress and history.",
            "schema": {
              "type": "object",
              "properties": {
                "configName": {
                  "type": "string",
                  "description": "The name of the configuration."
                },
                "jobId": {
                  "type": "string",
                  "description": "The ID of the job to retrieve details for."
                },
                "searchOptions": {
                  "type": "object",
                  "description": "Options to filter and search for jobs.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "The status of the jobs to filter by."
                    },
                    "queue": {
                      "type": "string",
                      "description": "The queue to which the jobs belong."
                    },
                    "listBy": {
                      "type": "string",
                      "description": "The criteria to list jobs by."
                    },
                    "maxResults": {
                      "type": "number",
                      "description": "The maximum number of results to return."
                    },
                    "order": {
                      "type": "string",
                      "description": "The order in which to list the jobs."
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved job details",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "$ref": "#/definitions/mediaConvertJobResponseTemplate"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "404": {
            "description": "Job not found",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "500": {
            "description": "Internal server error or MediaConvert service error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          }
        }
      }
    },
    "/v1/Azure/videoIndexer/analyzeSingle": {
      "post": {
        "description": "Analyze a single video from an Azure Blob Storage container using Azure Video Indexer. This endpoint processes a video by its file path, extracting insights like transcripts, faces, topics, and more. Simply provide the video file path (e.g. 'videos/video1.mp4') to analyze that specific video.",
        "summary": "Analyze a single video using Azure Video Indexer",
        "tags": [
          "Azure Video Indexer"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "description": "Request payload for analyzing a single video",
            "schema": {
              "type": "object",
              "properties": {
                "jobGuid": {
                  "type": "string",
                  "description": "Unique identifier for tracking the analysis job",
                  "required": true
                },
                "configName": {
                  "type": "string",
                  "description": "Name of the Azure configuration to use for authentication",
                  "required": true
                },
                "containerName": {
                  "type": "string",
                  "description": "Name of the Azure Blob Storage container containing the video",
                  "required": true
                },
                "filePath": {
                  "type": "string",
                  "description": "Path to the video file within the container (e.g. 'videos/video1.mp4')",
                  "required": true
                }
              },
              "required": [
                "jobGuid",
                "configName",
                "containerName",
                "filePath"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Video analysis request successfully submitted",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "$ref": "#/definitions/videoIndexerAnalyzeSingleFileRequest"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "500": {
            "description": "Internal server error or Azure Video Indexer service error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          }
        }
      }
    },
    "/v1/Azure/videoIndexer/analyzeMultiple": {
      "post": {
        "description": "Analyze multiple videos from an Azure Blob Storage container using Azure Video Indexer. This endpoint processes multiple videos by their file paths, extracting insights like transcripts, faces, topics, and more. Simply provide an array of video file paths (e.g. ['videos/video1.mp4', 'videos/video2.mp4']) to analyze those specific videos.",
        "summary": "Analyze multiple videos using Azure Video Indexer",
        "tags": [
          "Azure Video Indexer"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "description": "Request payload for analyzing multiple videos",
            "schema": {
              "type": "object",
              "properties": {
                "jobGuid": {
                  "type": "string",
                  "description": "Unique identifier for tracking the analysis job",
                  "required": true
                },
                "configName": {
                  "type": "string",
                  "description": "Name of the Azure configuration to use for authentication",
                  "required": true
                },
                "containerName": {
                  "type": "string",
                  "description": "Name of the Azure Blob Storage container containing the videos",
                  "required": true
                },
                "filePaths": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Array of file paths within the container (e.g. ['videos/video1.mp4', 'videos/video2.mp4'])",
                  "required": true
                }
              },
              "required": [
                "jobGuid",
                "configName",
                "containerName",
                "filePaths"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Video analysis request successfully submitted",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "$ref": "#/definitions/videoIndexerAnalyzeFolderRequest"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "500": {
            "description": "Internal server error or Azure Video Indexer service error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          }
        }
      }
    },
    "/v1/Azure/videoIndexer/analyzeFolder": {
      "post": {
        "description": "Analyze all videos within a specific folder in an Azure Blob Storage container using Azure Video Indexer. This endpoint processes multiple videos located in the specified folder path, extracting insights like transcripts, faces, topics, and more. Simply provide the folder path (e.g. 'videos/2023/') and all videos within that folder will be analyzed.",
        "summary": "Analyze videos in a folder using Azure Video Indexer",
        "tags": [
          "Azure Video Indexer"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "description": "Request payload for analyzing videos in a folder",
            "schema": {
              "type": "object",
              "properties": {
                "jobGuid": {
                  "type": "string",
                  "description": "Unique identifier for tracking the analysis job",
                  "required": true
                },
                "configName": {
                  "type": "string",
                  "description": "Name of the Azure configuration to use for authentication",
                  "required": true
                },
                "containerName": {
                  "type": "string",
                  "description": "Name of the Azure Blob Storage container containing the videos",
                  "required": true
                },
                "folderPath": {
                  "type": "string",
                  "description": "Path to the folder within the container (e.g. 'videos/2023/')",
                  "required": true
                }
              },
              "required": [
                "jobGuid",
                "configName",
                "containerName",
                "folderPath"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Video analysis request successfully submitted",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "$ref": "#/definitions/videoIndexerAnalyzeFolderRequest"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "500": {
            "description": "Internal server error or Azure Video Indexer service error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          }
        }
      }
    },
    "/v1/Azure/computerVision/analyzeSingle": {
      "post": {
        "description": "Send Analysis Request to Analyze Specific Image from container of Azure blob Storage using Azure Computer Vision. Here we need to pass Object key of the image like 'testDataset/landscape.png' in filePath to analyze this single image",
        "summary": "Send Request to Azure Computer Vision API for single image",
        "tags": [
          "Azure Computer Vision"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "description": "Request payload for single image analysis. Specify an image path within a container along with desired analysis types. The API will process the image and return comprehensive analysis results based on the specified analysis types.",
            "schema": {
              "type": "object",
              "properties": {
                "jobGuid": {
                  "type": "string",
                  "description": "Unique identifier for tracking the analysis job",
                  "required": true
                },
                "configName": {
                  "type": "string",
                  "description": "Name of the Azure configuration to use for authentication",
                  "required": true
                },
                "containerName": {
                  "type": "string",
                  "description": "Name of the Azure Blob Storage container containing the image",
                  "required": true
                },
                "filePath": {
                  "type": "string",
                  "description": "Path to the image file within the container (e.g. 'images/picture.jpg')",
                  "required": true
                },
                "analysisType": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "Caption",
                      "DenseCaptions",
                      "Objects",
                      "People",
                      "Read",
                      "SmartCrops",
                      "Tags"
                    ]
                  },
                  "description": "Types of analysis to perform on the image",
                  "required": true
                }
              },
              "required": [
                "jobGuid",
                "configName",
                "containerName",
                "filePath",
                "analysisType"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Single image analysis request successfully submitted",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "$ref": "#/definitions/computerVisionAnalyzeSingleFileRequest"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "500": {
            "description": "Internal server error or Azure Computer Vision service error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          }
        }
      }
    },
    "/v1/Azure/computerVision/analyzeMultiple": {
      "post": {
        "description": "Send Analysis Request to Analyze images within container of Azure blob Storage to Azure Computer Vision for batch process. Here we need to pass Object keys of all the images like 'testDataset/landscape.png' in array of filePaths to analyze this batch of images",
        "summary": "Send Request to Azure Computer Vision for batch process",
        "tags": [
          "Azure Computer Vision"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "description": "Request payload for batch image analysis. Specify multiple image paths within a container to analyze them in parallel. Each image will be processed according to the specified analysis types. The response will include the analysis results or processing status for each image.",
            "schema": {
              "type": "object",
              "properties": {
                "jobGuid": {
                  "type": "string",
                  "description": "Unique identifier for tracking the analysis job",
                  "required": true
                },
                "configName": {
                  "type": "string",
                  "description": "Name of the Azure configuration to use for authentication",
                  "required": true
                },
                "containerName": {
                  "type": "string",
                  "description": "Name of the Azure Blob Storage container containing the images",
                  "required": true
                },
                "filePaths": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Array of file paths to analyze (e.g. ['images/pic1.jpg', 'images/pic2.jpg'])",
                  "required": true
                },
                "analysisType": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "Caption",
                      "DenseCaptions",
                      "Objects",
                      "People",
                      "Read",
                      "SmartCrops",
                      "Tags"
                    ]
                  },
                  "description": "Types of analysis to perform on the images",
                  "required": true
                }
              },
              "required": [
                "jobGuid",
                "configName",
                "containerName",
                "filePaths",
                "analysisType"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Multiple image analysis request successfully submitted",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "$ref": "#/definitions/computerVisionAnalyzeFolderRequest"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "500": {
            "description": "Internal server error or Azure Computer Vision service error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          }
        }
      }
    },
    "/v1/Azure/computerVision/analyzeFolder": {
      "post": {
        "description": "Analyze images within a specific folder in an Azure Blob Storage container using Azure Computer Vision. This endpoint processes all images in the specified folder by analyzing them for features like captions, dense captions, objects, people detection, text reading, smart crops, and tags.",
        "summary": "Analyze all images in an Azure Blob Storage folder using Computer Vision",
        "tags": [
          "Azure Computer Vision"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "description": "Request parameters for folder image analysis",
            "schema": {
              "type": "object",
              "properties": {
                "jobGuid": {
                  "type": "string",
                  "description": "Unique identifier for tracking the analysis job",
                  "required": true
                },
                "configName": {
                  "type": "string",
                  "description": "Name of the Azure configuration to use for authentication",
                  "required": true
                },
                "containerName": {
                  "type": "string",
                  "description": "Name of the Azure Blob Storage container containing the images",
                  "required": true
                },
                "folderPath": {
                  "type": "string",
                  "description": "Folder prefix path containing the images to analyze (e.g. 'images/')",
                  "required": true
                },
                "analysisType": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "Caption",
                      "DenseCaptions",
                      "Objects",
                      "People",
                      "Read",
                      "SmartCrops",
                      "Tags"
                    ]
                  },
                  "description": "Types of analysis to perform on the images",
                  "required": true
                }
              },
              "required": [
                "jobGuid",
                "configName",
                "containerName",
                "folderPath",
                "analysisType"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Folder image analysis request successfully submitted",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "$ref": "#/definitions/computerVisionAnalyzeFolderRequest"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "500": {
            "description": "Internal server error or Azure Computer Vision service error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          }
        }
      }
    },
    "/v1/Azure/documentIntelligence/analyzeSingle": {
      "post": {
        "description": "Analyze a single document from an Azure Blob Storage container using Azure Document Intelligence. This endpoint processes a document by its file path, extracting information based on the chosen pre-built model type.",
        "summary": "Analyze a single document using Azure Document Intelligence",
        "tags": [
          "Azure Document Intelligence"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "description": "Request payload for analyzing a single document",
            "schema": {
              "type": "object",
              "properties": {
                "jobGuid": {
                  "type": "string",
                  "description": "Unique identifier for tracking the analysis job",
                  "required": true
                },
                "configName": {
                  "type": "string",
                  "description": "Name of the Azure configuration to use for authentication",
                  "required": true
                },
                "containerName": {
                  "type": "string",
                  "description": "Name of the Azure Blob Storage container containing the document",
                  "required": true
                },
                "filePath": {
                  "type": "string",
                  "description": "Path to the document file within the container (e.g. 'invoices/doc1.pdf')",
                  "required": true
                },
                "analysisType": {
                  "type": "string",
                  "description": "Pre-built model type to use for document analysis",
                  "enum": [
                    "prebuilt-contract",
                    "prebuilt-invoice",
                    "prebuilt-receipt",
                    "prebuilt-idDocument",
                    "prebuilt-tax.us.w2",
                    "prebuilt-tax.us.1099MISC",
                    "..."
                  ],
                  "required": true
                }
              },
              "required": [
                "jobGuid",
                "configName",
                "containerName",
                "filePath",
                "analysisType"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Document analysis request successfully submitted",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "$ref": "#/definitions/azureDocumentAIAnalyzeSingleFileRequest"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "500": {
            "description": "Internal server error or Azure Document Intelligence service error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          }
        }
      }
    },
    "/v1/Azure/documentIntelligence/analyzeMultiple": {
      "post": {
        "description": "Analyze multiple documents from an Azure Blob Storage container using Azure Document Intelligence. This endpoint processes multiple documents by their file paths, extracting information based on the chosen pre-built model type.",
        "summary": "Analyze multiple documents using Azure Document Intelligence",
        "tags": [
          "Azure Document Intelligence"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "description": "Request payload for analyzing multiple documents",
            "schema": {
              "type": "object",
              "properties": {
                "jobGuid": {
                  "type": "string",
                  "description": "Unique identifier for tracking the analysis job",
                  "required": true
                },
                "configName": {
                  "type": "string",
                  "description": "Name of the Azure configuration to use for authentication",
                  "required": true
                },
                "containerName": {
                  "type": "string",
                  "description": "Name of the Azure Blob Storage container containing the documents",
                  "required": true
                },
                "filePaths": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Array of file paths within the container (e.g. ['invoices/doc1.pdf', 'invoices/doc2.pdf'])",
                  "required": true
                },
                "analysisType": {
                  "type": "string",
                  "description": "Pre-built model type to use for document analysis",
                  "enum": [
                    "prebuilt-contract",
                    "prebuilt-invoice",
                    "prebuilt-receipt",
                    "prebuilt-idDocument",
                    "prebuilt-tax.us.w2",
                    "prebuilt-tax.us.1099MISC",
                    "..."
                  ],
                  "required": true
                }
              },
              "required": [
                "jobGuid",
                "configName",
                "containerName",
                "filePaths",
                "analysisType"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Document analysis request successfully submitted",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "$ref": "#/definitions/azureDocumentAIAnalyzeFolderRequest"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "500": {
            "description": "Internal server error or Azure Document Intelligence service error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          }
        }
      }
    },
    "/v1/Azure/documentIntelligence/analyzeFolder": {
      "post": {
        "description": "Analyze all documents within a specific folder in an Azure Blob Storage container using Azure Document Intelligence. This endpoint processes multiple documents located in the specified folder path, extracting information based on the chosen pre-built model type.",
        "summary": "Analyze documents in a folder using Azure Document Intelligence",
        "tags": [
          "Azure Document Intelligence"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "description": "Request payload for analyzing documents in a folder",
            "schema": {
              "type": "object",
              "properties": {
                "jobGuid": {
                  "type": "string",
                  "description": "Unique identifier for tracking the analysis job",
                  "required": true
                },
                "configName": {
                  "type": "string",
                  "description": "Name of the Azure configuration to use for authentication",
                  "required": true
                },
                "containerName": {
                  "type": "string",
                  "description": "Name of the Azure Blob Storage container containing the documents",
                  "required": true
                },
                "folderPath": {
                  "type": "string",
                  "description": "Path to the folder within the container (e.g. 'invoices/2023/')",
                  "required": true
                },
                "analysisType": {
                  "type": "string",
                  "description": "Pre-built model type to use for document analysis",
                  "enum": [
                    "prebuilt-contract",
                    "prebuilt-invoice",
                    "prebuilt-receipt",
                    "prebuilt-idDocument",
                    "prebuilt-tax.us.w2",
                    "prebuilt-tax.us.1099MISC",
                    "..."
                  ],
                  "required": true
                }
              },
              "required": [
                "jobGuid",
                "configName",
                "containerName",
                "folderPath",
                "analysisType"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Document analysis request successfully submitted",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "$ref": "#/definitions/azureDocumentAIAnalyzeFolderRequest"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "500": {
            "description": "Internal server error or Azure Document Intelligence service error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          }
        }
      }
    },
    "/v1/Azure/documentIntelligence/{name}/listProcessors": {
      "get": {
        "description": "Get List of All Available processor models  By Name of Configuration From the Database of Aye Aye Service",
        "summary": "Get List of Processor models for Document Intelligence",
        "tags": [
          "Azure Document Intelligence"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Name of Configuration",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "500": {
            "description": "Internal server error or Azure Document Intelligence service error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          }
        }
      }
    },
    "/v1/GCS/visionAI/analyzeSingle": {
      "post": {
        "description": "Initiates asynchronous image analysis for a single specified image within a Google Cloud Storage bucket. The endpoint queues an analysis job for the image file provided in the filePath. The job processes the image according to the requested analysis features using Google Cloud Vision AI APIs. The analysis runs as a background task, with results being made available once processing completes. This is particularly useful for analyzing a specific image stored in GCS.",
        "summary": "Queue image analysis job for a single specified image in GCS",
        "tags": [
          "GCS Vision AI"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "description": "Configuration parameters for image analysis job",
            "schema": {
              "type": "object",
              "properties": {
                "jobGuid": {
                  "type": "string",
                  "description": "Unique identifier for the analysis job",
                  "required": true
                },
                "analysisType": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "TYPE_UNSPECIFIED",
                      "FACE_DETECTION",
                      "LANDMARK_DETECTION",
                      "LOGO_DETECTION",
                      "LABEL_DETECTION",
                      "TEXT_DETECTION",
                      "DOCUMENT_TEXT_DETECTION",
                      "SAFE_SEARCH_DETECTION",
                      "IMAGE_PROPERTIES",
                      "CROP_HINTS",
                      "WEB_DETECTION",
                      "PRODUCT_SEARCH",
                      "OBJECT_LOCALIZATION"
                    ],
                    "description": "Type of image analysis feature to perform"
                  },
                  "description": "Array of analysis types to perform on the image",
                  "required": true
                },
                "configName": {
                  "type": "string",
                  "description": "Name of the configuration to use for the analysis",
                  "required": true
                },
                "bucketName": {
                  "type": "string",
                  "description": "Name of the GCS bucket containing the image",
                  "required": true
                },
                "filePath": {
                  "type": "string",
                  "description": "Path to the image file within the bucket",
                  "required": true
                }
              },
              "required": [
                "jobGuid",
                "analysisType",
                "configName",
                "bucketName",
                "filePath"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Analysis job successfully queued. Returns job identifier for tracking.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "$ref": "#/definitions/gcsAnalyzeSingleFileRequest"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "422": {
            "description": "Validation error in request parameters",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "500": {
            "description": "Internal server error or Vision AI API error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          }
        }
      }
    },
    "/v1/GCS/visionAI/analyzeMultiple": {
      "post": {
        "description": "Initiates asynchronous image analysis for a specified set of images within a Google Cloud Storage bucket. The endpoint queues analysis jobs for each image file provided in the filePaths array. Each job processes the image according to the requested analysis features using Google Cloud Vision AI APIs. The analysis runs as a background task, with results being made available once processing completes. This is particularly useful for batch processing a specific set of images stored in GCS.",
        "summary": "Queue image analysis jobs for a specified set of images in GCS",
        "tags": [
          "GCS Vision AI"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "description": "Configuration parameters for image analysis jobs",
            "schema": {
              "type": "object",
              "properties": {
                "jobGuid": {
                  "type": "string",
                  "description": "Unique identifier for the analysis job",
                  "required": true
                },
                "analysisType": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "TYPE_UNSPECIFIED",
                      "FACE_DETECTION",
                      "LANDMARK_DETECTION",
                      "LOGO_DETECTION",
                      "LABEL_DETECTION",
                      "TEXT_DETECTION",
                      "DOCUMENT_TEXT_DETECTION",
                      "SAFE_SEARCH_DETECTION",
                      "IMAGE_PROPERTIES",
                      "CROP_HINTS",
                      "WEB_DETECTION",
                      "PRODUCT_SEARCH",
                      "OBJECT_LOCALIZATION"
                    ],
                    "description": "Type of image analysis feature to perform"
                  },
                  "description": "Array of analysis types to perform on the images",
                  "required": true
                },
                "configName": {
                  "type": "string",
                  "description": "Name of the configuration to use for the analysis",
                  "required": true
                },
                "bucketName": {
                  "type": "string",
                  "description": "Name of the GCS bucket containing the images",
                  "required": true
                },
                "filePaths": {
                  "type": "array",
                  "description": "Array of file paths to the images within the bucket",
                  "items": {
                    "type": "string",
                    "description": "Path to the image file within the bucket"
                  },
                  "required": true
                }
              },
              "required": [
                "jobGuid",
                "analysisType",
                "configName",
                "bucketName",
                "filePaths"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Analysis jobs successfully queued. Returns job identifiers for tracking.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "$ref": "#/definitions/gcsAnalyzeFolderRequest"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "422": {
            "description": "Validation error in request parameters",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "500": {
            "description": "Internal server error or Vision AI API error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          }
        }
      }
    },
    "/v1/GCS/visionAI/analyzeFolder": {
      "post": {
        "description": "Initiates asynchronous image analysis for all images within a specified Google Cloud Storage folder. The endpoint queues analysis jobs for each image file found in the given folder path. Each job processes the image according to the requested analysis features using Google Cloud Vision AI APIs. The analysis runs as a background task, with results being made available once processing completes. This is particularly useful for batch processing multiple images stored in a single GCS folder location.",
        "summary": "Queue image analysis jobs for all images in a GCS folder",
        "tags": [
          "GCS Vision AI"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "description": "Configuration parameters for image analysis jobs",
            "schema": {
              "type": "object",
              "properties": {
                "jobGuid": {
                  "type": "string",
                  "description": "Unique identifier for the analysis job",
                  "required": true
                },
                "analysisType": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "TYPE_UNSPECIFIED",
                      "FACE_DETECTION",
                      "LANDMARK_DETECTION",
                      "LOGO_DETECTION",
                      "LABEL_DETECTION",
                      "TEXT_DETECTION",
                      "DOCUMENT_TEXT_DETECTION",
                      "SAFE_SEARCH_DETECTION",
                      "IMAGE_PROPERTIES",
                      "CROP_HINTS",
                      "WEB_DETECTION",
                      "PRODUCT_SEARCH",
                      "OBJECT_LOCALIZATION"
                    ],
                    "description": "Type of image analysis feature to perform"
                  },
                  "description": "Array of analysis types to perform on the images",
                  "required": true
                },
                "configName": {
                  "type": "string",
                  "description": "Name of the configuration to use for the analysis",
                  "required": true
                },
                "bucketName": {
                  "type": "string",
                  "description": "Name of the GCS bucket containing the images",
                  "required": true
                },
                "folderPath": {
                  "type": "string",
                  "description": "Path to the folder containing images within the bucket",
                  "required": true
                }
              },
              "required": [
                "jobGuid",
                "analysisType",
                "configName",
                "bucketName",
                "folderPath"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Analysis jobs successfully queued. Returns job identifiers for tracking.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "$ref": "#/definitions/gcsAnalyzeFolderRequest"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "422": {
            "description": "Validation error in request parameters",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "500": {
            "description": "Internal server error or Vision AI API error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          }
        }
      }
    },
    "/v1/GCS/videoIntelligence/analyzeSingle": {
      "post": {
        "description": "Initiates asynchronous video analysis for a single specified video in Google Cloud Storage. The endpoint queues an analysis job for the video file provided in the filePath. The job processes the video according to the requested analysis features (e.g., label detection, object tracking) using Google Cloud Video Intelligence APIs. The analysis runs as a background task, with results being made available once processing completes.",
        "summary": "Queue video analysis job for a single specified video in GCS",
        "tags": [
          "GCS Video Intelligence"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "description": "Configuration parameters for video analysis job",
            "schema": {
              "type": "object",
              "properties": {
                "bucketName": {
                  "type": "string",
                  "description": "Name of the GCS bucket containing the video",
                  "required": true
                },
                "filePath": {
                  "type": "string",
                  "description": "Path to the video file within the bucket",
                  "required": true
                },
                "featureType": {
                  "type": "string",
                  "description": "Type of video analysis feature to perform",
                  "enum": [
                    "LABEL_DETECTION",
                    "SHOT_CHANGE_DETECTION",
                    "EXPLICIT_CONTENT_DETECTION",
                    "SPEECH_TRANSCRIPTION",
                    "TEXT_DETECTION",
                    "OBJECT_TRACKING",
                    "LOGO_RECOGNITION",
                    "FACE_DETECTION",
                    "PERSON_DETECTION"
                  ],
                  "required": true
                }
              },
              "required": [
                "bucketName",
                "filePath",
                "featureType"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Analysis job successfully queued. Returns job identifier for tracking.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "$ref": "#/definitions/gcsAnalyzeFolderRequest"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "422": {
            "description": "Validation error in request parameters",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "500": {
            "description": "Internal server error or Video Intelligence API error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          }
        }
      }
    },
    "/v1/GCS/videoIntelligence/analyzeMultiple": {
      "post": {
        "description": "Initiates asynchronous video analysis for multiple specified videos in Google Cloud Storage. The endpoint queues analysis jobs for each video file provided in the filePaths array. Each job processes the video according to the requested analysis features (e.g., label detection, object tracking) using Google Cloud Video Intelligence APIs. The analysis runs as a background task, with results being made available once processing completes. This is particularly useful for batch processing a specific set of videos stored in GCS.",
        "summary": "Queue video analysis jobs for multiple specified videos in GCS",
        "tags": [
          "GCS Video Intelligence"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "description": "Configuration parameters for video analysis jobs",
            "schema": {
              "type": "object",
              "properties": {
                "bucketName": {
                  "type": "string",
                  "description": "Name of the GCS bucket containing the videos",
                  "required": true
                },
                "filePaths": {
                  "type": "array",
                  "description": "Array of file paths to the videos within the bucket",
                  "items": {
                    "type": "string"
                  },
                  "required": true
                },
                "featureType": {
                  "type": "string",
                  "description": "Type of video analysis feature to perform",
                  "enum": [
                    "LABEL_DETECTION",
                    "SHOT_CHANGE_DETECTION",
                    "EXPLICIT_CONTENT_DETECTION",
                    "SPEECH_TRANSCRIPTION",
                    "TEXT_DETECTION",
                    "OBJECT_TRACKING",
                    "LOGO_RECOGNITION",
                    "FACE_DETECTION",
                    "PERSON_DETECTION"
                  ],
                  "required": true
                }
              },
              "required": [
                "bucketName",
                "filePaths",
                "featureType"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Analysis jobs successfully queued. Returns job identifiers for tracking.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "$ref": "#/definitions/gcsAnalyzeFolderRequest"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "422": {
            "description": "Validation error in request parameters",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "500": {
            "description": "Internal server error or Video Intelligence API error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          }
        }
      }
    },
    "/v1/GCS/videoIntelligence/analyzeFolder": {
      "post": {
        "description": "Initiates asynchronous video analysis for all videos in a specified Google Cloud Storage folder. The endpoint queues analysis jobs for each video file found in the given folder path. Each job processes the video according to the requested analysis features (e.g., label detection, object tracking) using Google Cloud Video Intelligence APIs. The analysis runs as a background task, with results being made available once processing completes. This is particularly useful for batch processing multiple videos stored in a single GCS folder location.",
        "summary": "Queue video analysis jobs for all videos in a GCS folder",
        "tags": [
          "GCS Video Intelligence"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "description": "Configuration parameters for video analysis jobs",
            "schema": {
              "type": "object",
              "properties": {
                "bucketName": {
                  "type": "string",
                  "description": "Name of the GCS bucket containing the videos",
                  "required": true
                },
                "folderPath": {
                  "type": "string",
                  "description": "Path to the folder containing videos within the bucket",
                  "required": true
                },
                "featureType": {
                  "type": "string",
                  "description": "Type of video analysis feature to perform",
                  "enum": [
                    "LABEL_DETECTION",
                    "SHOT_CHANGE_DETECTION",
                    "EXPLICIT_CONTENT_DETECTION",
                    "SPEECH_TRANSCRIPTION",
                    "TEXT_DETECTION",
                    "OBJECT_TRACKING",
                    "LOGO_RECOGNITION",
                    "FACE_DETECTION",
                    "PERSON_DETECTION"
                  ],
                  "required": true
                }
              },
              "required": [
                "bucketName",
                "folderPath",
                "featureType"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Analysis jobs successfully queued. Returns job identifiers for tracking.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "$ref": "#/definitions/gcsAnalyzeFolderRequest"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "422": {
            "description": "Validation error in request parameters",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "500": {
            "description": "Internal server error or Video Intelligence API error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          }
        }
      }
    },
    "/v1/GCS/documentAI/analyzeSingle": {
      "post": {
        "description": "Analyze a single document from a Google Cloud Storage bucket using Document AI. This endpoint processes a document by its file path, extracting insights based on the chosen processor type. Simply provide the document file path (e.g. 'documents/doc1.pdf') to analyze that specific document.",
        "summary": "Analyze a single document using Google Cloud Document AI",
        "tags": [
          "GCS Document Intelligence"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "description": "Request payload for analyzing a single document",
            "schema": {
              "type": "object",
              "properties": {
                "jobGuid": {
                  "type": "string",
                  "description": "Unique identifier for tracking the analysis job",
                  "required": true
                },
                "configName": {
                  "type": "string",
                  "description": "Name of the GCP configuration to use for authentication",
                  "required": true
                },
                "bucketName": {
                  "type": "string",
                  "description": "Name of the Google Cloud Storage bucket containing the document",
                  "required": true
                },
                "filePath": {
                  "type": "string",
                  "description": "Path to the document file within the bucket (e.g. 'documents/doc1.pdf')",
                  "required": true
                },
                "analysisType": {
                  "type": "string",
                  "description": "Name of the Document AI processor to use for analysis",
                  "required": true
                }
              },
              "required": [
                "jobGuid",
                "configName",
                "bucketName",
                "filePath",
                "analysisType"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Document analysis request successfully submitted",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "$ref": "#/definitions/gcsDocumentAIAnalyzeSingleFileRequest"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "500": {
            "description": "Internal server error or Document AI service error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          }
        }
      }
    },
    "/v1/GCS/documentAI/analyzeMultiple": {
      "post": {
        "description": "Analyze multiple documents from a Google Cloud Storage bucket using Document AI. This endpoint processes multiple documents by their file paths, extracting insights based on the chosen processor type. Simply provide an array of document file paths (e.g. ['documents/doc1.pdf', 'documents/doc2.pdf']) to analyze those specific documents.",
        "summary": "Analyze multiple documents using Google Cloud Document AI",
        "tags": [
          "GCS Document Intelligence"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "description": "Request payload for analyzing multiple documents",
            "schema": {
              "type": "object",
              "properties": {
                "jobGuid": {
                  "type": "string",
                  "description": "Unique identifier for tracking the analysis job",
                  "required": true
                },
                "configName": {
                  "type": "string",
                  "description": "Name of the GCP configuration to use for authentication",
                  "required": true
                },
                "bucketName": {
                  "type": "string",
                  "description": "Name of the Google Cloud Storage bucket containing the documents",
                  "required": true
                },
                "filePaths": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Array of file paths within the bucket (e.g. ['documents/doc1.pdf', 'documents/doc2.pdf'])",
                  "required": true
                },
                "analysisType": {
                  "type": "string",
                  "description": "Name of the Document AI processor to use for analysis",
                  "required": true
                }
              },
              "required": [
                "jobGuid",
                "configName",
                "bucketName",
                "filePaths",
                "analysisType"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Document analysis request successfully submitted",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "$ref": "#/definitions/gcsDocumentAIAnalyzeFolderRequest"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "500": {
            "description": "Internal server error or Document AI service error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          }
        }
      }
    },
    "/v1/GCS/documentAI/analyzeFolder": {
      "post": {
        "description": "Analyze all documents within a specific folder in a Google Cloud Storage bucket using Document AI. This endpoint processes multiple documents located in the specified folder path, extracting insights based on the chosen processor type. Simply provide the folder path (e.g. 'documents/2023/') and all documents within that folder will be analyzed.",
        "summary": "Analyze documents in a folder using Google Cloud Document AI",
        "tags": [
          "GCS Document Intelligence"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "description": "Request payload for analyzing documents in a folder",
            "schema": {
              "type": "object",
              "properties": {
                "jobGuid": {
                  "type": "string",
                  "description": "Unique identifier for tracking the analysis job",
                  "required": true
                },
                "configName": {
                  "type": "string",
                  "description": "Name of the GCP configuration to use for authentication",
                  "required": true
                },
                "bucketName": {
                  "type": "string",
                  "description": "Name of the Google Cloud Storage bucket containing the documents",
                  "required": true
                },
                "folderPath": {
                  "type": "string",
                  "description": "Path to the folder within the bucket (e.g. 'documents/2023/')",
                  "required": true
                },
                "analysisType": {
                  "type": "string",
                  "description": "Name of the Document AI processor to use for analysis",
                  "required": true
                }
              },
              "required": [
                "jobGuid",
                "configName",
                "bucketName",
                "folderPath",
                "analysisType"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Document analysis request successfully submitted",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "$ref": "#/definitions/gcsDocumentAIAnalyzeFolderRequest"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "500": {
            "description": "Internal server error or Document AI service error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          }
        }
      }
    },
    "/v1/GCS/documentAI/processor": {
      "get": {
        "description": "Get List of All Available processor models for Google Document AI Service resource. Filter processors by name, type, state and location. Configuration name is required for authentication.",
        "summary": "Get List of Processor models for GCS Document Intelligence",
        "tags": [
          "GCS Document Intelligence"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "description": "Request payload for getting processors list",
            "schema": {
              "type": "object",
              "properties": {
                "configName": {
                  "type": "string",
                  "description": "Name of the GCP configuration to use for authentication",
                  "required": true
                },
                "location": {
                  "type": "string",
                  "description": "Location of processors (us or eu)",
                  "enum": [
                    "us",
                    "eu"
                  ],
                  "required": true
                },
                "type": {
                  "type": "string",
                  "description": "Type of processor model",
                  "enum": [
                    "OCR_PROCESSOR",
                    "FORM_PARSER_PROCESSOR",
                    "LAYOUT_PARSER_PROCESSOR",
                    "BANK_STATEMENT_PROCESSOR",
                    "EXPENSE_PROCESSOR",
                    "FORM_W2_PROCESSOR",
                    "ID_PROOFING_PROCESSOR",
                    "INVOICE_PROCESSOR",
                    "PAYSTUB_PROCESSOR",
                    "US_DRIVER_LICENSE_PROCESSOR",
                    "US_PASSPORT_PROCESSOR",
                    "UTILITY_PROCESSOR",
                    "CUSTOM_EXTRACTION_PROCESSOR",
                    "CUSTOM_CLASSIFICATION_PROCESSOR",
                    "CUSTOM_SPLITTING_PROCESSOR",
                    "SUMMARIZER_PROCESSOR"
                  ]
                },
                "state": {
                  "type": "string",
                  "description": "State of processor",
                  "enum": [
                    "ENABLED",
                    "DISABLED"
                  ]
                },
                "name": {
                  "type": "string",
                  "description": "Name of processor"
                },
                "pageSize": {
                  "type": "integer",
                  "description": "Number of processors to return per page (1-100)",
                  "minimum": 1,
                  "maximum": 100
                },
                "pageToken": {
                  "type": "string",
                  "description": "Token for pagination"
                }
              },
              "required": [
                "configName",
                "location"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved processors list",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/processor"
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          }
        }
      },
      "post": {
        "description": "Create a new processor model for Google Cloud Document AI Service. Requires configuration name, location, type and processor name.",
        "summary": "Create New Processor model for GCS Document Intelligence",
        "tags": [
          "GCS Document Intelligence"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "description": "Request payload for creating new processor",
            "schema": {
              "type": "object",
              "properties": {
                "configName": {
                  "type": "string",
                  "description": "Name of the GCP configuration to use for authentication",
                  "required": true
                },
                "location": {
                  "type": "string",
                  "description": "Location to create processor (us or eu)",
                  "enum": [
                    "us",
                    "eu"
                  ],
                  "required": true
                },
                "type": {
                  "type": "string",
                  "description": "Type of processor model",
                  "enum": [
                    "OCR_PROCESSOR",
                    "FORM_PARSER_PROCESSOR",
                    "LAYOUT_PARSER_PROCESSOR",
                    "BANK_STATEMENT_PROCESSOR",
                    "EXPENSE_PROCESSOR",
                    "FORM_W2_PROCESSOR",
                    "ID_PROOFING_PROCESSOR",
                    "INVOICE_PROCESSOR",
                    "PAYSTUB_PROCESSOR",
                    "US_DRIVER_LICENSE_PROCESSOR",
                    "US_PASSPORT_PROCESSOR",
                    "UTILITY_PROCESSOR",
                    "CUSTOM_EXTRACTION_PROCESSOR",
                    "CUSTOM_CLASSIFICATION_PROCESSOR",
                    "CUSTOM_SPLITTING_PROCESSOR",
                    "SUMMARIZER_PROCESSOR"
                  ],
                  "required": true
                },
                "name": {
                  "type": "string",
                  "description": "Name for the new processor",
                  "required": true
                }
              },
              "required": [
                "configName",
                "location",
                "type",
                "name"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processor created successfully",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "$ref": "#/definitions/processor"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete an existing processor model from Google Cloud Document AI Service. Requires configuration name and processor name.",
        "summary": "Delete Processor model for GCS Document Intelligence",
        "tags": [
          "GCS Document Intelligence"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "description": "Request payload for deleting processor",
            "schema": {
              "type": "object",
              "properties": {
                "configName": {
                  "type": "string",
                  "description": "Name of the GCP configuration to use for authentication",
                  "required": true
                },
                "name": {
                  "type": "string",
                  "description": "Name of the processor to delete",
                  "required": true
                }
              },
              "required": [
                "configName",
                "name"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processor deleted successfully",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          }
        }
      }
    },
    "/v1/GCS/transcode/jobs": {
      "get": {
        "description": "Retrieve detailed information about a specific transcoding job from Google Transcode API. This endpoint allows you to track the status and progress of your transcoding job by providing its unique job ID. The job processes media files stored in Google Cloud Storage (GCS) buckets. The response includes details such as job state, creation time, output details, and any errors if present.",
        "summary": "Get Job Details by ID",
        "tags": [
          "GCS Transcode API"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jobId",
            "in": "query",
            "description": "Unique identifier of the transcoding job to retrieve. This ID is returned when creating a new job.",
            "required": true,
            "type": "string"
          },
          {
            "name": "request",
            "in": "body",
            "description": "Configuration details required for authentication and job retrieval",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "configName": {
                  "type": "string",
                  "description": "Name of the GCP configuration to use for authentication. Must be a valid configuration name set up in your environment.",
                  "required": true
                },
                "region": {
                  "type": "string",
                  "description": "Region where the Transcode API job is running (e.g., 'us-central1', 'europe-west1'). Must match the region where the job was created.",
                  "required": true
                }
              },
              "required": [
                "configName",
                "region"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved job details. Returns comprehensive information about the transcoding job including its current status, progress, and output details.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "$ref": "#/definitions/gcsTranscodeGetJobDetailResponse"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters. This could be due to missing required fields or invalid region/configuration name.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "404": {
            "description": "Job not found. The specified job ID does not exist or has been deleted.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "422": {
            "description": "Validation error. Request payload failed schema validation.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "500": {
            "description": "Internal server error or error from Google Transcode API service.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          }
        }
      },
      "post": {
        "description": "Create a new transcoding job using Google Transcode API. This endpoint initiates the transcoding of media files stored in Google Cloud Storage (GCS) using predefined templates. The Transcode API processes your source media file from a GCS bucket according to the specified template settings and saves the output back to your designated GCS location. You can track the job's progress using the returned job ID.",
        "summary": "Create New Transcoding Job",
        "tags": [
          "Google Transcode API"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "Detailed configuration for the new transcoding job",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "configName": {
                  "type": "string",
                  "description": "Name of the GCP configuration to use for authentication. Must be a valid configuration name with appropriate permissions for both Transcode API and GCS.",
                  "required": true
                },
                "region": {
                  "type": "string",
                  "description": "Region where the Transcode API job should run (e.g., 'us-central1', 'europe-west1'). Choose a region close to your GCS bucket locations for optimal performance.",
                  "required": true
                },
                "templateId": {
                  "type": "string",
                  "description": "ID of the transcoding template to apply. The template defines output format, codec settings, and other transcoding parameters.",
                  "required": true
                },
                "inputUri": {
                  "type": "string",
                  "description": "GCS URI of the input media file to be transcoded. Must be in the format: gs://{bucket-name}/{file-path}. The file must be accessible with provided credentials.",
                  "example": "gs://example-bucket/raw-videos/input.mp4",
                  "required": true
                },
                "outputUri": {
                  "type": "string",
                  "description": "GCS URI where the transcoded output should be saved. Must be in the format: gs://{bucket-name}/{output-path}. The bucket must be writable with provided credentials.",
                  "example": "gs://example-bucket/processed-videos/output.mp4",
                  "required": true
                }
              },
              "required": [
                "configName",
                "region",
                "templateId",
                "inputUri",
                "outputUri"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Job created successfully. Returns a job ID that can be used to track the transcoding progress.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "$ref": "#/definitions/gcsTranscodeAddJobResponse"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters. Check if all required fields are provided and GCS URIs are properly formatted.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "401": {
            "description": "Unauthorized request. Verify your configuration name and ensure it has necessary permissions for both Transcode API and GCS.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "422": {
            "description": "Validation error. Request payload failed schema validation.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "500": {
            "description": "Internal server error or error from Google Transcode API service.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          }
        }
      },
      "delete": {
        "description": "Remove an existing transcoding job from Google Transcode API. This endpoint allows you to cancel and delete a transcoding job that processes media files from Google Cloud Storage (GCS). If the job is still running, it will be cancelled before deletion. Note that this operation cannot be undone, and any partially processed outputs may remain in your GCS bucket.",
        "summary": "Delete Transcoding Job",
        "tags": [
          "Google Transcode API"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jobId",
            "in": "query",
            "description": "Unique identifier of the job to be deleted. Must be a valid job ID from a previously created transcoding job.",
            "required": true,
            "type": "string"
          },
          {
            "name": "request",
            "in": "body",
            "description": "Authentication and location details for the delete operation",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "configName": {
                  "type": "string",
                  "description": "Name of the GCP configuration to use for authentication. Must have permissions to delete Transcode API jobs.",
                  "required": true
                },
                "region": {
                  "type": "string",
                  "description": "Region where the Transcode API job exists. Must match the region where the job was created.",
                  "required": true
                }
              },
              "required": [
                "configName",
                "region"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Job successfully deleted. The job has been cancelled (if running) and removed from the system.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters. Verify the job ID format and ensure all required fields are provided.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "404": {
            "description": "Job not found. The specified job ID does not exist or has already been deleted.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "422": {
            "description": "Validation error. Request payload failed schema validation.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "500": {
            "description": "Internal server error or error from Google Transcode API service.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          }
        }
      }
    },
    "/v1/GCS/transcode/jobs/list": {
      "get": {
        "description": "Retrieves a paginated list of transcoding jobs from Google Cloud Storage Transcode API. This endpoint allows you to monitor and track all transcoding jobs with support for pagination to handle large result sets efficiently.",
        "summary": "List Transcoding Jobs",
        "tags": [
          "GCS Transcode API"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "Configuration parameters for listing and filtering transcoding jobs",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "configName": {
                  "type": "string",
                  "description": "Name of the GCS configuration profile to use for authentication and access"
                },
                "region": {
                  "type": "string",
                  "description": "GCS region identifier where the transcoding jobs are located (e.g., 'us-central1')"
                },
                "pageSize": {
                  "type": "integer",
                  "description": "Maximum number of jobs to return per page (default: 50, max: 100)",
                  "maximum": 100,
                  "default": 50
                },
                "pageToken": {
                  "type": "string",
                  "description": "Pagination token from previous response for retrieving the next page of results"
                }
              },
              "required": [
                "configName",
                "region"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved list of transcoding jobs",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "jobs": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/gcsTranscodeAddJobResponse"
                          }
                        },
                        "nextPageToken": {
                          "type": "string",
                          "description": "Token to retrieve the next page of results. Empty if no more results are available."
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters provided",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "401": {
            "description": "Authentication failed or invalid credentials",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "422": {
            "description": "Validation error in request parameters",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "500": {
            "description": "Internal server error or GCS Transcode API error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          }
        }
      }
    },
    "/v1/GCS/transcode/templates": {
      "get": {
        "description": "Retrieve detailed information about a specific transcoding template from Google Transcode API. This endpoint allows you to fetch the configuration and settings of a template by providing its unique template ID. Templates define the output format, codec settings, and other transcoding parameters that can be reused across multiple jobs.",
        "summary": "Get Template Details by ID",
        "tags": [
          "GCS Transcode API"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "query",
            "description": "Unique identifier of the transcoding template to retrieve. Must be a valid template ID created through the Transcode API.",
            "required": true,
            "type": "string"
          },
          {
            "name": "request",
            "in": "body",
            "description": "Configuration details required to authenticate and locate the template",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "configName": {
                  "type": "string",
                  "description": "Name of the GCP configuration to use for authentication. Must be a valid configuration name with appropriate permissions for Transcode API.",
                  "required": true
                },
                "region": {
                  "type": "string",
                  "description": "Region where the template is stored (e.g., 'us-central1', 'europe-west1'). Must match the region where the template was created.",
                  "required": true
                }
              },
              "required": [
                "configName",
                "region"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Template details retrieved successfully. Returns the complete template configuration.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "$ref": "#/definitions/gcsTranscodeGetTemplateResponse"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters. Check the request format and required fields.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "404": {
            "description": "Template not found. The specified template ID does not exist in the given region.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "422": {
            "description": "Validation error. The request parameters failed validation checks.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "500": {
            "description": "Internal server error or Google Transcode API error occurred.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          }
        }
      },
      "post": {
        "description": "Create a new transcoding template in Google Transcode API. Templates define the output format, codec settings, preprocessing options, and other transcoding parameters that can be reused across multiple jobs. This helps maintain consistency in output quality and reduces configuration overhead.",
        "summary": "Create New Transcoding Template",
        "tags": [
          "Google Transcode API"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "Detailed configuration for the new transcoding template",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "configName": {
                  "type": "string",
                  "description": "Name of the GCP configuration to use for authentication. Must be a valid configuration name with appropriate permissions for Transcode API.",
                  "required": true
                },
                "region": {
                  "type": "string",
                  "description": "Region where the template should be created (e.g., 'us-central1', 'europe-west1'). Choose a region that aligns with your transcoding job locations.",
                  "required": true
                },
                "name": {
                  "type": "string",
                  "description": "Descriptive name for the template. Should be unique within your project for easy identification.",
                  "required": true
                },
                "templateConfig": {
                  "type": "object",
                  "description": "Comprehensive template configuration defining all transcoding parameters",
                  "properties": {
                    "inputs": {
                      "type": "array",
                      "description": "List of input media files to be processed",
                      "items": {
                        "type": "object",
                        "properties": {
                          "key": {
                            "type": "string",
                            "description": "Unique identifier for the input"
                          },
                          "uri": {
                            "type": "string",
                            "description": "A GCS URI for storage location in Google Cloud Storage"
                          },
                          "preprocessingConfig": {
                            "type": "object",
                            "description": "Configuration for preprocessing the input media",
                            "properties": {
                              "color": {
                                "type": "object",
                                "description": "Color preprocessing settings"
                              },
                              "deniose": {
                                "type": "object",
                                "description": "Noise reduction settings"
                              },
                              "deblock": {
                                "type": "object",
                                "description": "Deblocking filter settings"
                              },
                              "audio": {
                                "type": "object",
                                "description": "Audio preprocessing settings"
                              },
                              "crop": {
                                "type": "object",
                                "description": "Video cropping settings"
                              },
                              "pad": {
                                "type": "object",
                                "description": "Video padding settings"
                              },
                              "deinterlace": {
                                "type": "object",
                                "description": "Settings for deinterlacing video",
                                "properties": {
                                  "yadif": {
                                    "type": "object",
                                    "description": "Yet Another DeInterlacing Filter settings"
                                  },
                                  "bwdif": {
                                    "type": "object",
                                    "description": "Bob Weaver Deinterlacing Filter settings"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "editList": {
                      "type": "array",
                      "description": "List of editing operations to be performed",
                      "items": {
                        "type": "object",
                        "properties": {
                          "key": {
                            "type": "string",
                            "description": "Unique identifier for the edit operation"
                          },
                          "inputs": {
                            "type": "array",
                            "description": "List of input keys to be used in this edit",
                            "items": {
                              "type": "string"
                            }
                          },
                          "endTimeOffset": {
                            "type": "string",
                            "description": "End time for the edit segment in format HH:MM:SS.SSS"
                          },
                          "startTimeOffset": {
                            "type": "string",
                            "description": "Start time for the edit segment in format HH:MM:SS.SSS"
                          }
                        }
                      }
                    },
                    "elementaryStreams": {
                      "type": "array",
                      "description": "Configuration for individual media streams",
                      "items": {
                        "type": "object",
                        "properties": {
                          "key": {
                            "type": "string",
                            "description": "Unique identifier for the stream"
                          },
                          "videoStream": {
                            "h264": {
                              "type": "object",
                              "description": "H.264/AVC codec settings"
                            },
                            "h265": {
                              "type": "object",
                              "description": "H.265/HEVC codec settings"
                            },
                            "vp9": {
                              "type": "object",
                              "description": "VP9 codec settings"
                            }
                          },
                          "audioStream": {
                            "codec": {
                              "type": "string",
                              "description": "Audio codec to use (e.g., AAC, MP3)"
                            },
                            "bitrateBps": {
                              "type": "number",
                              "description": "Target audio bitrate in bits per second"
                            },
                            "channelCount": {
                              "type": "number",
                              "description": "Number of audio channels"
                            },
                            "channelLayout": {
                              "type": "array",
                              "description": "Layout of audio channels",
                              "items": {
                                "type": "string"
                              }
                            },
                            "mappings": {
                              "type": "array",
                              "description": "Audio channel mapping configuration",
                              "items": {
                                "type": "object"
                              }
                            },
                            "sampleHertz": {
                              "type": "string",
                              "description": "Audio sample rate in Hertz"
                            },
                            "languageCode": {
                              "type": "string",
                              "description": "ISO 639-1/639-2 language code"
                            },
                            "displayName": {
                              "type": "string",
                              "description": "Display name for the audio stream"
                            }
                          },
                          "textStream": {
                            "codec": {
                              "type": "string",
                              "description": "Text/subtitle codec to use"
                            },
                            "languageCode": {
                              "type": "string",
                              "description": "ISO 639-1/639-2 language code for subtitles"
                            },
                            "mapping": {
                              "type": "array",
                              "description": "Text stream mapping configuration",
                              "items": {
                                "type": "object"
                              }
                            },
                            "displayName": {
                              "type": "string",
                              "description": "Display name for the text stream"
                            }
                          }
                        }
                      }
                    },
                    "muxStreams": {
                      "type": "array",
                      "description": "Configuration for multiplexed output streams",
                      "items": {
                        "type": "object",
                        "properties": {
                          "key": {
                            "type": "string",
                            "description": "Unique identifier for the muxed stream"
                          },
                          "fileName": {
                            "type": "string",
                            "description": "Output filename for the muxed stream"
                          },
                          "container": {
                            "type": "string",
                            "description": "Container format (e.g., MP4, MKV, HLS)"
                          },
                          "elementaryStreams": {
                            "type": "array",
                            "description": "List of elementary stream keys to include",
                            "items": {
                              "type": "string"
                            }
                          },
                          "segmentSettings": {
                            "type": "object",
                            "description": "Settings for stream segmentation",
                            "properties": {
                              "segmentDuration": {
                                "type": "string",
                                "description": "Duration of each segment"
                              },
                              "individualSegments": {
                                "type": "boolean",
                                "description": "Whether to create individual segment files"
                              }
                            }
                          },
                          "encryptionId": {
                            "type": "string",
                            "description": "ID of encryption configuration to apply"
                          },
                          "fmp4": {
                            "type": "object",
                            "description": "Fragmented MP4 specific settings",
                            "properties": {
                              "codecTag": {
                                "type": "string",
                                "description": "Codec tag for fMP4 container"
                              }
                            }
                          }
                        }
                      }
                    },
                    "manifests": {
                      "type": "array",
                      "description": "Configuration for streaming manifests",
                      "items": {
                        "type": "object",
                        "properties": {
                          "fileName": {
                            "type": "string",
                            "description": "Name of the manifest file"
                          },
                          "type": {
                            "type": "string",
                            "description": "Manifest type (e.g., HLS, DASH)"
                          },
                          "muxStreams": {
                            "type": "array",
                            "description": "List of mux stream keys to include in manifest",
                            "items": {
                              "type": "string"
                            }
                          },
                          "dash": {
                            "type": "object",
                            "description": "DASH-specific settings",
                            "properties": {
                              "segmentReferenceScheme": {
                                "type": "string",
                                "description": "Scheme for referencing segments in manifest"
                              }
                            }
                          }
                        }
                      }
                    },
                    "output": {
                      "type": "object",
                      "description": "Output configuration",
                      "properties": {
                        "uri": {
                          "type": "string",
                          "description": "GCS URI for the output storage location"
                        }
                      }
                    },
                    "adBreaks": {
                      "type": "array",
                      "description": "Configuration for ad insertion points",
                      "items": {
                        "type": "object",
                        "properties": {
                          "startTimeOffset": {
                            "type": "string",
                            "description": "Timestamp for ad break insertion"
                          }
                        }
                      }
                    },
                    "pubsubDestination": {
                      "type": "object",
                      "description": "Configuration for Pub/Sub notifications",
                      "properties": {
                        "topic": {
                          "type": "string",
                          "description": "The name of the Pub/Sub topic to publish notifications"
                        }
                      }
                    },
                    "spriteSheets": {
                      "type": "array",
                      "description": "Configuration for thumbnail sprite sheet generation",
                      "items": {
                        "type": "object",
                        "properties": {
                          "format": {
                            "type": "string",
                            "description": "Image format for sprites (e.g., JPEG, PNG)"
                          },
                          "filePrefix": {
                            "type": "string",
                            "description": "Prefix for sprite sheet filenames"
                          },
                          "spriteWidthPixels": {
                            "type": "number",
                            "description": "Width of each sprite in pixels"
                          },
                          "spriteHeightPixels": {
                            "type": "number",
                            "description": "Height of each sprite in pixels"
                          },
                          "columnCount": {
                            "type": "number",
                            "description": "Number of sprites per row"
                          },
                          "rowCount": {
                            "type": "number",
                            "description": "Number of sprite rows"
                          },
                          "startTimeOffset": {
                            "type": "string",
                            "description": "Start time for sprite generation"
                          },
                          "endTimeOffset": {
                            "type": "string",
                            "description": "End time for sprite generation"
                          },
                          "quality": {
                            "type": "number",
                            "description": "Image quality (1-100)"
                          },
                          "totalCount": {
                            "type": "number",
                            "description": "Total number of sprites to generate"
                          },
                          "interval": {
                            "type": "string",
                            "description": "Time interval between sprites"
                          }
                        }
                      }
                    },
                    "overlays": {
                      "type": "array",
                      "description": "Configuration for video overlays",
                      "items": {
                        "type": "object",
                        "properties": {
                          "image": {
                            "type": "object",
                            "description": "Image overlay settings",
                            "properties": {
                              "uri": {
                                "type": "string",
                                "description": "GCS URI of the overlay image"
                              },
                              "resolution": {
                                "type": "object",
                                "description": "Resolution settings for the overlay"
                              },
                              "alpha": {
                                "type": "number",
                                "description": "Opacity of the overlay (0-1)"
                              }
                            }
                          },
                          "animations": {
                            "type": "array",
                            "description": "List of animations to apply to overlay",
                            "items": {
                              "type": "object",
                              "properties": {
                                "animationStatic": {
                                  "type": "object",
                                  "description": "Static position animation settings"
                                },
                                "animationFade": {
                                  "type": "object",
                                  "description": "Fade animation settings"
                                },
                                "animationEnd": {
                                  "type": "object",
                                  "description": "End state animation settings"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "encryptions": {
                      "type": "array",
                      "description": "Configuration for content encryption",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Unique identifier for encryption configuration"
                          },
                          "drmSystems": {
                            "type": "object",
                            "description": "DRM system configuration"
                          },
                          "aes128": {
                            "type": "object",
                            "description": "AES-128 encryption settings"
                          },
                          "sampleAes": {
                            "type": "object",
                            "description": "Sample AES encryption settings"
                          },
                          "mpegCenc": {
                            "type": "object",
                            "description": "MPEG Common Encryption settings",
                            "properties": {
                              "schema": {
                                "type": "string",
                                "description": "MPEG-CENC schema version"
                              }
                            }
                          },
                          "secretManagerKeySource": {
                            "type": "object",
                            "description": "Google Cloud Secret Manager key configuration",
                            "properties": {
                              "secretVersion": {
                                "type": "string",
                                "description": "Version of the secret to use"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "required": [
                "configName",
                "region",
                "name",
                "templateConfig"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Template created successfully. Returns the template details including its ID.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "$ref": "#/definitions/gcsTranscodeGetTemplateResponse"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters. Check the request format and required fields.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "401": {
            "description": "Authentication failed or insufficient permissions.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "422": {
            "description": "Validation error. The template configuration failed validation checks.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "500": {
            "description": "Internal server error or Google Transcode API error occurred.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          }
        }
      },
      "delete": {
        "description": "Delete an existing transcoding template from Google Transcode API. This permanently removes the template and it can no longer be used for new transcoding jobs. Existing jobs using this template will not be affected.",
        "summary": "Delete Transcoding Template",
        "tags": [
          "Google Transcode API"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "query",
            "description": "Unique identifier of the template to delete. Must be a valid template ID that exists in the specified region.",
            "required": true,
            "type": "string"
          },
          {
            "name": "request",
            "in": "body",
            "description": "Configuration details required for template deletion",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "configName": {
                  "type": "string",
                  "description": "Name of the GCP configuration to use for authentication. Must be a valid configuration name with appropriate permissions for Transcode API.",
                  "required": true
                },
                "region": {
                  "type": "string",
                  "description": "Region where the template exists (e.g., 'us-central1', 'europe-west1'). Must match the region where the template was created.",
                  "required": true
                }
              },
              "required": [
                "configName",
                "region"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Template successfully deleted.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters. Check the request format and required fields.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "404": {
            "description": "Template not found. The specified template ID does not exist in the given region.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "422": {
            "description": "Validation error. The request parameters failed validation checks.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "500": {
            "description": "Internal server error or Google Transcode API error occurred.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          }
        }
      }
    },
    "/v1/GCS/transcode/templates/list": {
      "get": {
        "description": "Retrieves a paginated list of transcoding templates from Google Cloud Storage Transcode API. Templates define the output settings and parameters for transcoding operations, including video codec, bitrate, resolution, and other encoding parameters.",
        "summary": "List Transcoding Templates",
        "tags": [
          "GCS Transcode API"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "Configuration parameters for listing and filtering transcoding templates",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "configName": {
                  "type": "string",
                  "description": "Name of the GCS configuration profile to use for authentication and access"
                },
                "region": {
                  "type": "string",
                  "description": "GCS region identifier where the templates are located (e.g., 'us-central1')"
                },
                "pageSize": {
                  "type": "integer",
                  "description": "Maximum number of templates to return per page (default: 50, max: 100)",
                  "maximum": 100,
                  "default": 50
                },
                "pageToken": {
                  "type": "string",
                  "description": "Pagination token from previous response for retrieving the next page of results"
                }
              },
              "required": [
                "configName",
                "region"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved list of transcoding templates",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "templates": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/gcsTranscodeGetTemplateResponse"
                          }
                        },
                        "nextPageToken": {
                          "type": "string",
                          "description": "Token to retrieve the next page of results. Empty if no more results are available."
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters provided",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "401": {
            "description": "Authentication failed or invalid credentials",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "422": {
            "description": "Validation error in request parameters",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "500": {
            "description": "Internal server error or GCS Transcode API error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          }
        }
      }
    },
    "/v1/revAI/analyzeSingle": {
      "post": {
        "description": "Initiates an asynchronous transcription job for a single audio/video file stored in cloud storage (AWS S3, Azure Blob Storage, or Google Cloud Storage). The endpoint queues a transcription job for the file specified in the filePath. Using the provided sasConfigName, it generates a SAS URL to access the file from the respective cloud storage. The revAIConfigName is used to authenticate with Rev.ai's transcription service. The job is processed asynchronously through a queue system, which handles uploading the file to Rev.ai, transcription, and retrieval of the JSON output file containing the transcription.",
        "summary": "Queue transcription job for a single file stored in cloud storage (AWS S3, Azure Blob, GCS)",
        "tags": [
          "Rev AI Transcription"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "description": "Configuration parameters for single file transcription job",
            "schema": {
              "type": "object",
              "properties": {
                "jobGuid": {
                  "type": "string",
                  "description": "Unique identifier for the transcription job",
                  "required": true
                },
                "sasConfigName": {
                  "type": "string",
                  "description": "Configuration name for accessing remote cloud storage (AWS S3, Azure Blob, or GCS)",
                  "required": true
                },
                "revAIConfigName": {
                  "type": "string",
                  "description": "Configuration name for Rev.ai transcription service authentication",
                  "required": true
                },
                "bucketName": {
                  "type": "string",
                  "description": "Name of the cloud storage bucket/container containing the file",
                  "required": true
                },
                "filePath": {
                  "type": "string",
                  "description": "Path to the file within the bucket to be transcribed",
                  "required": true
                },
                "params": {
                  "type": "object",
                  "description": "Optional parameters for Rev.ai transcription configuration"
                }
              },
              "required": [
                "jobGuid",
                "sasConfigName",
                "revAIConfigName",
                "bucketName",
                "filePath"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Transcription job successfully queued. Returns job identifier for tracking.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "$ref": "#/definitions/revAIAnalyzeSingleFileRequest"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "422": {
            "description": "Validation error in request parameters",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "500": {
            "description": "Internal server error or Rev.ai API error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          }
        }
      }
    },
    "/v1/revAI/analyzeMultiple": {
      "post": {
        "description": "Initiates asynchronous transcription jobs for multiple audio/video files stored in cloud storage (AWS S3, Azure Blob Storage, or Google Cloud Storage). The endpoint queues transcription jobs for each file specified in the filePaths array. Using the provided sasConfigName, it generates SAS URLs to access the files from the respective cloud storage. The revAIConfigName is used to authenticate with Rev.ai's transcription service. Each job is processed asynchronously through a queue system, which handles uploading files to Rev.ai, transcription, and retrieval of the JSON output files containing the transcriptions.",
        "summary": "Queue multiple transcription jobs for files stored in cloud storage (AWS S3, Azure Blob, GCS)",
        "tags": [
          "Rev AI Transcription"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "description": "Configuration parameters for batch transcription jobs",
            "schema": {
              "type": "object",
              "properties": {
                "jobGuid": {
                  "type": "string",
                  "description": "Unique identifier for the batch transcription job",
                  "required": true
                },
                "sasConfigName": {
                  "type": "string",
                  "description": "Configuration name for accessing remote cloud storage (AWS S3, Azure Blob, or GCS)",
                  "required": true
                },
                "revAIConfigName": {
                  "type": "string",
                  "description": "Configuration name for Rev.ai transcription service authentication",
                  "required": true
                },
                "bucketName": {
                  "type": "string",
                  "description": "Name of the cloud storage bucket/container containing the files",
                  "required": true
                },
                "filePaths": {
                  "type": "array",
                  "description": "Array of file paths within the bucket to be transcribed",
                  "items": {
                    "type": "string"
                  },
                  "required": true
                },
                "params": {
                  "type": "object",
                  "description": "Optional parameters for Rev.ai transcription configuration"
                }
              },
              "required": [
                "jobGuid",
                "sasConfigName",
                "revAIConfigName",
                "bucketName",
                "filePaths"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Transcription jobs successfully queued. Returns job identifier for tracking.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "$ref": "#/definitions/revAIAnalyzeFolderRequest"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "422": {
            "description": "Validation error in request parameters",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "500": {
            "description": "Internal server error or Rev.ai API error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          }
        }
      }
    },
    "/v1/revAI/analyzeFolder": {
      "post": {
        "description": "Initiates asynchronous transcription jobs for all audio/video files in a specified folder within cloud storage (AWS S3, Azure Blob Storage, or Google Cloud Storage). The endpoint queues transcription jobs for each file found in the given folderPath. Using the provided sasConfigName, it generates SAS URLs to access the files from the respective cloud storage. The revAIConfigName is used to authenticate with Rev.ai's transcription service. Each job is processed asynchronously through a queue system, which handles uploading files to Rev.ai, transcription, and retrieval of the JSON output files containing the transcriptions.",
        "summary": "Queue transcription jobs for all files in a cloud storage folder (AWS S3, Azure Blob, GCS)",
        "tags": [
          "Rev AI Transcription"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "description": "Configuration parameters for folder transcription jobs",
            "schema": {
              "type": "object",
              "properties": {
                "jobGuid": {
                  "type": "string",
                  "description": "Unique identifier for the folder transcription job",
                  "required": true
                },
                "sasConfigName": {
                  "type": "string",
                  "description": "Configuration name for accessing remote cloud storage (AWS S3, Azure Blob, or GCS)",
                  "required": true
                },
                "revAIConfigName": {
                  "type": "string",
                  "description": "Configuration name for Rev.ai transcription service authentication",
                  "required": true
                },
                "bucketName": {
                  "type": "string",
                  "description": "Name of the cloud storage bucket/container containing the folder",
                  "required": true
                },
                "folderPath": {
                  "type": "string",
                  "description": "Path to the folder within the bucket to be processed",
                  "required": true
                },
                "params": {
                  "type": "object",
                  "description": "Optional parameters for Rev.ai transcription configuration"
                }
              },
              "required": [
                "jobGuid",
                "sasConfigName",
                "revAIConfigName",
                "bucketName",
                "folderPath"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Transcription jobs successfully queued. Returns job identifier for tracking.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "$ref": "#/definitions/revAIAnalyzeFolderRequest"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "422": {
            "description": "Validation error in request parameters",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "500": {
            "description": "Internal server error or Rev.ai API error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          }
        }
      }
    },
    "/v1/TwelveLab/index": {
      "get": {
        "description": "Returns List of All available Indexes for the TwelveLabs Account whose credential has been provided.",
        "summary": "Get All Indexes",
        "tags": [
          "Twelve Labs"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "configName": {
                  "type": "string",
                  "description": "The configuration name for TwelveLabs",
                  "required": true
                },
                "page": {
                  "type": "number",
                  "description": "Current page number",
                  "required": false
                },
                "pageSize": {
                  "type": "number",
                  "description": "Number of items per page",
                  "required": false
                }
              },
              "required": [
                "configName"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved indexes",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "$ref": "#/definitions/twelveLabIndexResponse"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "500": {
            "description": "Internal server error or Twelve Labs service error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          }
        }
      },
      "post": {
        "description": "Create a new Index at Twelve labs account for uploading videos",
        "summary": "Create new Index",
        "tags": [
          "Twelve Labs"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "configName": {
                  "type": "string",
                  "description": "The configuration name for TwelveLabs",
                  "required": true
                },
                "indexName": {
                  "type": "string",
                  "description": "Name of the index to create",
                  "required": true
                },
                "engines": {
                  "type": "array",
                  "description": "List of engines to use",
                  "required": true,
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "enum": [
                          "pegasus1",
                          "pegasus1.1",
                          "marengo",
                          "marengo2",
                          "marengo2.5",
                          "marengo2.6"
                        ],
                        "description": "Engine name"
                      },
                      "options": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "visual",
                            "text_in_video",
                            "conversation",
                            "logo"
                          ],
                          "description": "Engine options"
                        }
                      }
                    }
                  }
                },
                "addons": {
                  "type": "array",
                  "description": "Additional engine options",
                  "required": false,
                  "items": {
                    "type": "string",
                    "enum": [
                      "thumbnail"
                    ]
                  }
                }
              },
              "required": [
                "configName",
                "indexName",
                "engines"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Index created successfully",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "description": "Created index ID"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "500": {
            "description": "Internal server error or Twelve Labs service error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete an Index from Twelve Labs account",
        "summary": "Delete Index",
        "tags": [
          "Twelve Labs"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "configName": {
                  "type": "string",
                  "description": "The configuration name for TwelveLabs",
                  "required": true
                },
                "indexId": {
                  "type": "string",
                  "description": "ID of the index to delete",
                  "required": true
                }
              },
              "required": [
                "configName",
                "indexId"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Index deleted successfully",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "500": {
            "description": "Internal server error or Twelve Labs service error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          }
        }
      }
    },
    "/v1/TwelveLab/videos": {
      "get": {
        "description": "Lists all videos available in the specified index from TwelveLabs",
        "summary": "List all videos",
        "tags": [
          "Twelve Labs"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "configName": {
                  "type": "string",
                  "description": "The configuration name for TwelveLabs",
                  "required": true
                },
                "indexId": {
                  "type": "string",
                  "description": "The ID of the index containing the videos",
                  "required": true
                },
                "videoId": {
                  "type": "string",
                  "description": "Optional: The specific video ID to retrieve details for",
                  "required": false
                },
                "page": {
                  "type": "number",
                  "description": "Current page number",
                  "required": false
                },
                "pageLimit": {
                  "type": "number",
                  "description": "Number of items per page",
                  "minimum": 10,
                  "maximum": 50,
                  "required": false
                }
              },
              "required": [
                "configName",
                "indexId"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved videos",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "$ref": "#/definitions/twelveLabVideoResponse"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "500": {
            "description": "Internal server error or Twelve Labs service error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete a specific video from a TwelveLabs index",
        "summary": "Delete a video",
        "tags": [
          "Twelve Labs"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "configName": {
                  "type": "string",
                  "description": "The configuration name for TwelveLabs",
                  "required": true
                },
                "indexId": {
                  "type": "string",
                  "description": "The ID of the index containing the video",
                  "required": true
                },
                "videoId": {
                  "type": "string",
                  "description": "The ID of the video to be deleted",
                  "required": true
                }
              },
              "required": [
                "configName",
                "indexId",
                "videoId"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Video successfully deleted",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "500": {
            "description": "Internal server error or Twelve Labs service error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          }
        }
      }
    },
    "/v1/TwelveLab/textProcessing/analyzeSingle": {
      "post": {
        "description": "Process a single file using Twelve Labs Text Processing API to extract text or generate text based on the service type selected.",
        "summary": "Process a single file using Twelve Labs Text Processing API",
        "tags": [
          "Twelve Labs"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "jobGuid",
                "sasConfigName",
                "twelveLabConfigName",
                "service",
                "generationType",
                "bucketName",
                "filePath"
              ],
              "properties": {
                "jobGuid": {
                  "type": "string",
                  "description": "Unique identifier for the job"
                },
                "sasConfigName": {
                  "type": "string",
                  "description": "Configuration name for accessing Remote storage"
                },
                "twelveLabConfigName": {
                  "type": "string",
                  "description": "Configuration name for TwelveLab"
                },
                "service": {
                  "type": "string",
                  "enum": [
                    "Text Generation",
                    "Text Extraction",
                    "Video Query",
                    "Classification"
                  ],
                  "description": "Type of Service / Job"
                },
                "generationType": {
                  "type": "string",
                  "enum": [
                    "transcript",
                    "ocr",
                    "logo",
                    "gist",
                    "summary",
                    "custom"
                  ],
                  "description": "Type of text extraction or generation"
                },
                "generationOption": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "title",
                      "topic",
                      "hashtag",
                      "summary",
                      "chapter",
                      "highlight"
                    ]
                  },
                  "description": "Options for text generation based on generationType"
                },
                "bucketName": {
                  "type": "string",
                  "description": "Name of the storage bucket/container"
                },
                "filePath": {
                  "type": "string",
                  "description": "Path to the file to process"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Text processing request successfully processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "$ref": "#/definitions/twelveLabsTextProcessingSingleFileRequest"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "500": {
            "description": "Internal server error or Twelve Labs service error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          }
        }
      }
    },
    "/v1/TwelveLab/textProcessing/analyzeMultiple": {
      "post": {
        "description": "Process multiple files using Twelve Labs Text Processing API to extract text or generate text based on the service type selected.",
        "summary": "Process multiple files using Twelve Labs Text Processing API",
        "tags": [
          "Twelve Labs"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "jobGuid",
                "sasConfigName",
                "twelveLabConfigName",
                "service",
                "generationType",
                "bucketName",
                "indexId",
                "filePaths"
              ],
              "properties": {
                "jobGuid": {
                  "type": "string",
                  "description": "Unique identifier for the job"
                },
                "sasConfigName": {
                  "type": "string",
                  "description": "Configuration name for accessing Remote storage"
                },
                "twelveLabConfigName": {
                  "type": "string",
                  "description": "Configuration name for TwelveLab"
                },
                "service": {
                  "type": "string",
                  "enum": [
                    "Text Generation",
                    "Text Extraction",
                    "Video Query",
                    "Classification"
                  ],
                  "description": "Type of Service / Job"
                },
                "generationType": {
                  "type": "string",
                  "enum": [
                    "transcript",
                    "ocr",
                    "logo",
                    "gist",
                    "summary",
                    "custom"
                  ],
                  "description": "Type of text extraction or generation"
                },
                "generationOption": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "title",
                      "topic",
                      "hashtag",
                      "summary",
                      "chapter",
                      "highlight"
                    ]
                  },
                  "description": "Options for text generation based on generationType"
                },
                "bucketName": {
                  "type": "string",
                  "description": "Name of the storage bucket/container"
                },
                "indexId": {
                  "type": "string",
                  "description": "Index ID for Twelve Lab Collection"
                },
                "filePaths": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Array of file paths to process"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Text processing request successfully processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "$ref": "#/definitions/twelveLabsTextProcessingFolderRequest"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "500": {
            "description": "Internal server error or Twelve Labs service error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          }
        }
      }
    },
    "/v1/TwelveLab/textProcessing/analyzeFolder": {
      "post": {
        "description": "Process all files in a folder using Twelve Labs Text Processing API to extract text or generate text based on the service type selected.",
        "summary": "Process all files in a folder using Twelve Labs Text Processing API",
        "tags": [
          "Twelve Labs"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "jobGuid",
                "sasConfigName",
                "twelveLabConfigName",
                "service",
                "generationType",
                "bucketName",
                "folderPath"
              ],
              "properties": {
                "jobGuid": {
                  "type": "string",
                  "description": "Unique identifier for the job"
                },
                "sasConfigName": {
                  "type": "string",
                  "description": "Configuration name for accessing Remote storage"
                },
                "twelveLabConfigName": {
                  "type": "string",
                  "description": "Configuration name for TwelveLab"
                },
                "service": {
                  "type": "string",
                  "enum": [
                    "Text Generation",
                    "Text Extraction",
                    "Video Query",
                    "Classification"
                  ],
                  "description": "Type of Service / Job"
                },
                "generationType": {
                  "type": "string",
                  "enum": [
                    "transcript",
                    "ocr",
                    "logo",
                    "gist",
                    "summary",
                    "custom"
                  ],
                  "description": "Type of text extraction or generation"
                },
                "generationOption": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "title",
                      "topic",
                      "hashtag",
                      "summary",
                      "chapter",
                      "highlight"
                    ]
                  },
                  "description": "Options for text generation based on generationType"
                },
                "bucketName": {
                  "type": "string",
                  "description": "Name of the storage bucket/container"
                },
                "folderPath": {
                  "type": "string",
                  "description": "Path to the folder containing files to process"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Text processing request successfully processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "$ref": "#/definitions/twelveLabsTextProcessingFolderRequest"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "500": {
            "description": "Internal server error or Twelve Labs service error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          }
        }
      }
    },
    "v1/TwelveLab/query/singleTextQuery": {
      "post": {
        "description": "Searches videos with matches provided by a text query from a video collection at TwelveLabs.",
        "summary": "Searches collection of videos with a textual query.",
        "tags": [
          "Twelve Labs"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "configName": {
                  "type": "string",
                  "description": "The configuration name for the search request.",
                  "required": true
                },
                "indexId": {
                  "type": "string",
                  "description": "Index ID to specify which video collection to search within.",
                  "required": true
                },
                "queryText": {
                  "type": "string",
                  "description": "Text query for searching the video collection.",
                  "required": true
                },
                "queryOptions": {
                  "type": "object",
                  "properties": {
                    "operator": {
                      "type": "string",
                      "description": "Search operator to refine the search query.",
                      "enum": [
                        "or",
                        "and"
                      ]
                    },
                    "groupBy": {
                      "type": "string",
                      "description": "Group search results by a specified property.",
                      "enum": [
                        "clip",
                        "video"
                      ]
                    },
                    "threshold": {
                      "type": "string",
                      "description": "Confidence threshold for matching.",
                      "enum": [
                        "high",
                        "medium",
                        "low"
                      ]
                    },
                    "adjustConfidenceLevel": {
                      "type": "number",
                      "description": "Adjust the confidence level of the search query (between 0 and 1).",
                      "minimum": 0,
                      "maximum": 1
                    },
                    "sortOption": {
                      "type": "string",
                      "description": "Sort option for the search results.",
                      "enum": [
                        "clip_count",
                        "score"
                      ]
                    },
                    "pageSize": {
                      "type": "number",
                      "description": "Limit the number of results to be returned (between 10 and 50).",
                      "minimum": 10,
                      "maximum": 50
                    },
                    "conversationOption": {
                      "type": "string",
                      "description": "Option for conversation matching.",
                      "enum": [
                        "semantic",
                        "exact_match"
                      ]
                    },
                    "searchOptions": {
                      "type": "array",
                      "description": "Video Query search options.",
                      "items": {
                        "type": "string",
                        "enum": [
                          "visual",
                          "text_in_video",
                          "conversation",
                          "logo"
                        ]
                      }
                    }
                  }
                }
              },
              "required": [
                "configName",
                "indexId",
                "queryText"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search request successfully processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "$ref": "#/definitions/twelveLabQueryResponse"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "500": {
            "description": "Internal server error or Twelve Labs service error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          }
        }
      }
    },
    "v1/TwelveLab/query/singleImageQuery": {
      "post": {
        "description": "Searches videos with matches provided by the image query from a video collection at TwelveLabs via an image URL or by uploading an image.",
        "summary": "Searches collection of videos with an image query.",
        "tags": [
          "Twelve Labs"
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "description": "Image file to be searched in videos",
            "required": false,
            "type": "file"
          },
          {
            "name": "configName",
            "in": "formData",
            "description": "The configuration name for the search request.",
            "required": true,
            "type": "string"
          },
          {
            "name": "indexId",
            "in": "formData",
            "description": "Index ID to specify which video collection to search within.",
            "required": true,
            "type": "string"
          },
          {
            "name": "mediaUrl",
            "in": "formData",
            "description": "Public URL of the image to be used for the search query.",
            "required": false,
            "type": "string"
          },
          {
            "name": "operator",
            "in": "formData",
            "description": "Search operator to refine the search query.",
            "required": false,
            "type": "string",
            "enum": [
              "or",
              "and"
            ]
          },
          {
            "name": "groupBy",
            "in": "formData",
            "description": "Group search results by a specified property.",
            "required": false,
            "type": "string",
            "enum": [
              "clip",
              "video"
            ]
          },
          {
            "name": "threshold",
            "in": "formData",
            "description": "Confidence threshold for matching.",
            "required": false,
            "type": "string",
            "enum": [
              "high",
              "medium",
              "low"
            ]
          },
          {
            "name": "adjustConfidenceLevel",
            "in": "formData",
            "description": "Adjust the confidence level of the search query (between 0 and 1).",
            "required": false,
            "type": "number",
            "minimum": 0,
            "maximum": 1
          },
          {
            "name": "sortOption",
            "in": "formData",
            "description": "Sort option for the search results.",
            "required": false,
            "type": "string",
            "enum": [
              "clip_count",
              "score"
            ]
          },
          {
            "name": "pageLimit",
            "in": "formData",
            "description": "Limit the number of results to be returned (between 10 and 50).",
            "required": false,
            "type": "number",
            "minimum": 10,
            "maximum": 50
          },
          {
            "name": "conversationOption",
            "in": "formData",
            "description": "Option for conversation matching.",
            "required": false,
            "type": "string",
            "enum": [
              "semantic",
              "exact_match"
            ]
          },
          {
            "name": "searchOptions",
            "in": "formData",
            "description": "Video Query search options.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "visual",
                "text_in_video",
                "conversation",
                "logo"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search request successfully processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "$ref": "#/definitions/twelveLabQueryResponse"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "500": {
            "description": "Internal server error or Twelve Labs service error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          }
        }
      }
    },
    "v1/TwelveLab/classify/classifyIndex": {
      "post": {
        "description": "Classifies all videos within Index by matching classes provided by input classes along with their prompts.",
        "summary": "Classifies All videos within Index with input classes.",
        "tags": [
          "Twelve Labs"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "configName": {
                  "type": "string",
                  "description": "The name of the configuration.",
                  "required": true
                },
                "indexId": {
                  "type": "string",
                  "description": "Unique identifier for the index.",
                  "required": true
                },
                "filterOptions": {
                  "type": "object",
                  "description": "Options to filter the search results.",
                  "required": true,
                  "properties": {
                    "pageLimit": {
                      "type": "integer",
                      "description": "Maximum number of results per page.",
                      "minimum": 1,
                      "maximum": 50
                    },
                    "includeClips": {
                      "type": "integer",
                      "description": "Flag to include clips in the results.",
                      "enum": [
                        0,
                        1
                      ]
                    },
                    "showDetailedScore": {
                      "type": "integer",
                      "description": "Flag to show detailed score in the results.",
                      "enum": [
                        0,
                        1
                      ]
                    },
                    "conversationOption": {
                      "type": "string",
                      "description": "Option for conversation matching.",
                      "enum": [
                        "semantic",
                        "exact_match"
                      ],
                      "required": true
                    },
                    "searchOptions": {
                      "type": "array",
                      "description": "List of search options to be used.",
                      "required": true,
                      "items": {
                        "type": "string",
                        "enum": [
                          "visual",
                          "conversation",
                          "text_in_video",
                          "logo"
                        ]
                      }
                    },
                    "threshold": {
                      "type": "object",
                      "description": "Threshold values for filtering results.",
                      "properties": {
                        "minVideoScore": {
                          "type": "number",
                          "description": "Minimum score for videos.",
                          "minimum": 1,
                          "maximum": 100,
                          "default": 75
                        },
                        "minClipScore": {
                          "type": "number",
                          "description": "Minimum score for clips.",
                          "minimum": 1,
                          "maximum": 100,
                          "default": 30
                        },
                        "minDurationRatio": {
                          "type": "number",
                          "description": "Minimum duration ratio.",
                          "minimum": 0.01,
                          "maximum": 1,
                          "default": 0.5
                        }
                      }
                    }
                  }
                },
                "inputClasses": {
                  "type": "array",
                  "description": "List of input classes with their respective prompts.",
                  "required": true,
                  "items": {
                    "type": "object",
                    "required": [
                      "name",
                      "prompts"
                    ],
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Name of the input class."
                      },
                      "prompts": {
                        "type": "array",
                        "description": "List of prompts associated with the input class.",
                        "items": {
                          "type": "string"
                        }
                      },
                      "options": {
                        "type": "array",
                        "description": "List of search options to be used.",
                        "items": {
                          "type": "string",
                          "enum": [
                            "visual",
                            "conversation",
                            "text_in_video"
                          ]
                        }
                      },
                      "conversationOption": {
                        "type": "string",
                        "description": "Option for conversation matching.",
                        "enum": [
                          "semantic",
                          "exact_match"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Classification request successfully processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "$ref": "#/definitions/twelveLabClassificationResponse"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "500": {
            "description": "Internal server error or Twelve Labs service error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          }
        }
      }
    },
    "v1/TwelveLab/classify/classifyVideos": {
      "post": {
        "description": "Classifies specific videos by matching classes provided by input classes along with their prompts.",
        "summary": "Classifies specific videos with input classes",
        "tags": [
          "Twelve Labs"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "configName": {
                  "type": "string",
                  "description": "The name of the configuration.",
                  "required": true
                },
                "videoIds": {
                  "type": "array",
                  "description": "Array of video IDs to classify",
                  "required": true,
                  "items": {
                    "type": "string",
                    "description": "Unique identifier for the video."
                  }
                },
                "filterOptions": {
                  "type": "object",
                  "description": "Options to filter the search results.",
                  "required": true,
                  "properties": {
                    "pageLimit": {
                      "type": "integer",
                      "description": "Maximum number of results per page.",
                      "minimum": 1,
                      "maximum": 50
                    },
                    "includeClips": {
                      "type": "integer",
                      "description": "Flag to include clips in the results.",
                      "enum": [
                        0,
                        1
                      ]
                    },
                    "showDetailedScore": {
                      "type": "integer",
                      "description": "Flag to show detailed score in the results.",
                      "enum": [
                        0,
                        1
                      ]
                    },
                    "conversationOption": {
                      "type": "string",
                      "description": "Option for conversation matching.",
                      "enum": [
                        "semantic",
                        "exact_match"
                      ],
                      "required": true
                    },
                    "searchOptions": {
                      "type": "array",
                      "description": "List of search options to be used.",
                      "required": true,
                      "items": {
                        "type": "string",
                        "enum": [
                          "visual",
                          "conversation",
                          "text_in_video",
                          "logo"
                        ]
                      }
                    },
                    "threshold": {
                      "type": "object",
                      "description": "Threshold values for filtering results.",
                      "properties": {
                        "minVideoScore": {
                          "type": "number",
                          "description": "Minimum score for videos.",
                          "minimum": 1,
                          "maximum": 100,
                          "default": 75
                        },
                        "minClipScore": {
                          "type": "number",
                          "description": "Minimum score for clips.",
                          "minimum": 1,
                          "maximum": 100,
                          "default": 30
                        },
                        "minDurationRatio": {
                          "type": "number",
                          "description": "Minimum duration ratio.",
                          "minimum": 0.01,
                          "maximum": 1,
                          "default": 0.5
                        }
                      }
                    }
                  }
                },
                "inputClasses": {
                  "type": "array",
                  "description": "List of input classes with their respective prompts.",
                  "required": true,
                  "items": {
                    "type": "object",
                    "required": [
                      "name",
                      "prompts"
                    ],
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Name of the input class."
                      },
                      "prompts": {
                        "type": "array",
                        "description": "List of prompts associated with the input class.",
                        "items": {
                          "type": "string"
                        }
                      },
                      "options": {
                        "type": "array",
                        "description": "List of search options to be used.",
                        "items": {
                          "type": "string",
                          "enum": [
                            "visual",
                            "conversation",
                            "text_in_video"
                          ]
                        }
                      },
                      "conversationOption": {
                        "type": "string",
                        "description": "Option for conversation matching.",
                        "enum": [
                          "semantic",
                          "exact_match"
                        ]
                      }
                    }
                  }
                }
              },
              "required": [
                "configName",
                "videoIds",
                "inputClasses",
                "filterOptions"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Classification request successfully processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "$ref": "#/definitions/twelveLabClassificationResponse"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "500": {
            "description": "Internal server error or Twelve Labs service error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          }
        }
      }
    },
    "/v1/AWS/{name}/Test": {
      "get": {
        "description": "Test AWS Configuration stored in Aye Aye Service Database",
        "summary": "Test AWS Configuration",
        "tags": [
          "Test Configuration"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Name of Configuration",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "$ref": "#/definitions/awsTestConfig"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "422": {
            "description": "Validation error in request parameters",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          }
        }
      }
    },
    "/v1/Azure/{name}/Test": {
      "get": {
        "description": "Test Azure Configuration stored in Aye Aye Service Database",
        "summary": "Test Azure Configuration",
        "tags": [
          "Test Configuration"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Name of Configuration",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "$ref": "#/definitions/azureTestConfig"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "422": {
            "description": "Validation error in request parameters",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          }
        }
      }
    },
    "/v1/GCS/{name}/Test": {
      "get": {
        "description": "Test GCS Configuration stored in Aye Aye Service Database",
        "summary": "Test GCS Configuration",
        "tags": [
          "Test Configuration"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Name of Configuration",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "$ref": "#/definitions/gcsTestConfig"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "422": {
            "description": "Validation error in request parameters",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          }
        }
      }
    },
    "/v1/revAI/{name}/Test": {
      "get": {
        "description": "Test Rev AI Configuration stored in Aye Aye Service Database",
        "summary": "Test Rev AI Configuration",
        "tags": [
          "Test Configuration"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Name of Configuration",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "$ref": "#/definitions/revAiTestConfig"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "422": {
            "description": "Validation error in request parameters",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "500": {
            "description": "Internal server error or Rev.ai API error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          }
        }
      }
    },
    "/v1/TwelveLab/{name}/Test": {
      "get": {
        "description": "Test Twelve Labs Configuration stored in Aye Aye Service Database to validate connection and settings",
        "summary": "Test Twelve Labs Configuration",
        "tags": [
          "Test Configuration"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "configName",
            "in": "path",
            "description": "Name of the Twelve Labs configuration to test",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Configuration test successful",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "$ref": "#/definitions/twelveLabTestConfig"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid configuration parameters",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "404": {
            "description": "Configuration not found",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          },
          "500": {
            "description": "Internal server error or Twelve Labs service error",
            "schema": {
              "$ref": "#/definitions/commonResponse"
            }
          }
        }
      }
    },
    "/v1/getAnalysisResults": {
      "get": {
        "description": "Fetch Result for a Single or Multiple Entity Analysis for Jobs created by Aye Aye Service",
        "summary": "Fetch Result for a  Analysis Results",
        "tags": [
          "Result"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "taskId",
            "in": "query",
            "description": "Task Id for which the result needs to be fetched",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "$ref": "#/definitions/folderAnalyzeResponse"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "422": {
            "description": "Validation error in request parameters",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          }
        }
      }
    },
    "/v1/configuration": {
      "post": {
        "description": "Add new Configuration To Aye Aye Service Database",
        "summary": "Add new Configuration",
        "tags": [
          "Configuration"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "configuration",
            "in": "body",
            "description": "Configuration Details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configuration"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "$ref": "#/definitions/configuration"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "422": {
            "description": "Validation error in request parameters",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          }
        }
      },
      "get": {
        "description": "List all Configurations from Aye Aye Service Database",
        "summary": "Get all Configurations",
        "tags": [
          "Configuration"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/configuration"
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "422": {
            "description": "Validation error in request parameters",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          }
        }
      }
    },
    "/v1/configuration/{name}": {
      "get": {
        "description": "Get Configuration By Name From the Database of Aye Aye Service",
        "summary": "Get Configuration By Name",
        "tags": [
          "Configuration"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Name of Configuration",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "$ref": "#/definitions/configuration"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "422": {
            "description": "Validation error in request parameters",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          }
        }
      },
      "put": {
        "description": "Update Configuration By Name",
        "summary": "Update Configuration By Name",
        "tags": [
          "Configuration"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Name of Configuration",
            "required": true,
            "type": "string"
          },
          {
            "name": "configuration",
            "in": "body",
            "description": "Configuration Details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/configuration"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                },
                {
                  "$ref": "#/definitions/configuration"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "422": {
            "description": "Validation error in request parameters",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/commonResponse"
                }
              ]
            }
          }
        }
      }
    }
  },
  "definitions": {
    "commonResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "number"
        },
        "statusState": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "childJobResponse": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string"
        },
        "parentJobId": {
          "type": "string"
        },
        "filePath": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "createdAt": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "downloadUrl": {
          "type": "string"
        }
      }
    },
    "rekognitionAnalyzeSingleFileRequest": {
      "type": "object",
      "properties": {
        "response": {
          "type": "object",
          "properties": {
            "taskId": {
              "type": "string"
            },
            "analysisType": {
              "type": "string"
            },
            "filePath": {
              "type": "string"
            }
          }
        }
      }
    },
    "rekognitionAnalyzeFolderRequest": {
      "type": "object",
      "properties": {
        "response": {
          "type": "object",
          "properties": {
            "taskId": {
              "type": "string"
            },
            "analysisType": {
              "type": "string"
            },
            "filePaths": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "mediaConvertAddJobRequest": {
      "type": "object",
      "properties": {
        "response": {
          "type": "object",
          "properties": {
            "taskId": {
              "type": "string"
            },
            "bucketName": {
              "type": "string"
            },
            "filePaths": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "mediaConvertJobCancelRequest": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "properties": {
            "$metadata": {
              "type": "object",
              "properties": {
                "httpStatusCode": {
                  "type": "number"
                },
                "requestId": {
                  "type": "string"
                },
                "attempts": {
                  "type": "number"
                },
                "totalRetryDelay": {
                  "type": "number"
                }
              }
            }
          }
        }
      }
    },
    "gcsAnalyzeSingleFileRequest": {
      "type": "object",
      "properties": {
        "response": {
          "type": "object",
          "properties": {
            "taskId": {
              "type": "string"
            },
            "analysisType": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "filePath": {
              "type": "string"
            }
          }
        }
      }
    },
    "gcsAnalyzeFolderRequest": {
      "type": "object",
      "properties": {
        "response": {
          "type": "object",
          "properties": {
            "taskId": {
              "type": "string"
            },
            "analysisType": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "filePaths": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "gcsDocumentAIAnalyzeSingleFileRequest": {
      "type": "object",
      "properties": {
        "response": {
          "type": "object",
          "properties": {
            "taskId": {
              "type": "string"
            },
            "processor": {
              "type": "string"
            },
            "filePath": {
              "type": "string"
            }
          }
        }
      }
    },
    "gcsDocumentAIAnalyzeFolderRequest": {
      "type": "object",
      "properties": {
        "response": {
          "type": "object",
          "properties": {
            "taskId": {
              "type": "string"
            },
            "analysisType": {
              "type": "string"
            },
            "filePaths": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "gcsTranscodeAddJobResponse": {
      "type": "object",
      "properties": {
        "response": {
          "type": "object",
          "properties": {
            "taskId": {
              "type": "string"
            },
            "bucketName": {
              "type": "string"
            },
            "filePaths": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "gcsTranscodeGetTemplateResponse": {
      "type": "object",
      "description": "Schema for a Google Cloud Storage transcode job template",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of job template that uniquely identifies it"
        },
        "config": {
          "type": "object",
          "description": "Configuration settings for the transcode job template",
          "properties": {
            "inputs": {
              "type": "array",
              "description": "List of input media files to be processed",
              "items": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "description": "Unique identifier for the input"
                  },
                  "uri": {
                    "type": "string",
                    "description": "A GCS URI for storage location in Google Cloud Storage"
                  },
                  "preprocessingConfig": {
                    "type": "object",
                    "description": "Configuration for preprocessing the input media",
                    "properties": {
                      "color": {
                        "type": "object",
                        "description": "Color preprocessing settings"
                      },
                      "deniose": {
                        "type": "object",
                        "description": "Noise reduction settings"
                      },
                      "deblock": {
                        "type": "object",
                        "description": "Deblocking filter settings"
                      },
                      "audio": {
                        "type": "object",
                        "description": "Audio preprocessing settings"
                      },
                      "crop": {
                        "type": "object",
                        "description": "Video cropping settings"
                      },
                      "pad": {
                        "type": "object",
                        "description": "Video padding settings"
                      },
                      "deinterlace": {
                        "type": "object",
                        "description": "Settings for deinterlacing video",
                        "properties": {
                          "yadif": {
                            "type": "object",
                            "description": "Yet Another DeInterlacing Filter settings"
                          },
                          "bwdif": {
                            "type": "object",
                            "description": "Bob Weaver Deinterlacing Filter settings"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "editList": {
              "type": "array",
              "description": "List of editing operations to be performed",
              "items": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "description": "Unique identifier for the edit operation"
                  },
                  "inputs": {
                    "type": "array",
                    "description": "List of input keys to be used in this edit",
                    "items": {
                      "type": "string"
                    }
                  },
                  "endTimeOffset": {
                    "type": "string",
                    "description": "End time for the edit segment in format HH:MM:SS.SSS"
                  },
                  "startTimeOffset": {
                    "type": "string",
                    "description": "Start time for the edit segment in format HH:MM:SS.SSS"
                  }
                }
              }
            },
            "elementaryStreams": {
              "type": "array",
              "description": "Configuration for individual media streams",
              "items": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "description": "Unique identifier for the stream"
                  },
                  "videoStream": {
                    "h264": {
                      "type": "object",
                      "description": "H.264/AVC codec settings"
                    },
                    "h265": {
                      "type": "object",
                      "description": "H.265/HEVC codec settings"
                    },
                    "vp9": {
                      "type": "object",
                      "description": "VP9 codec settings"
                    }
                  },
                  "audioStream": {
                    "codec": {
                      "type": "string",
                      "description": "Audio codec to use (e.g., AAC, MP3)"
                    },
                    "bitrateBps": {
                      "type": "number",
                      "description": "Target audio bitrate in bits per second"
                    },
                    "channelCount": {
                      "type": "number",
                      "description": "Number of audio channels"
                    },
                    "channelLayout": {
                      "type": "array",
                      "description": "Layout of audio channels",
                      "items": {
                        "type": "string"
                      }
                    },
                    "mappings": {
                      "type": "array",
                      "description": "Audio channel mapping configuration",
                      "items": {
                        "type": "object"
                      }
                    },
                    "sampleHertz": {
                      "type": "string",
                      "description": "Audio sample rate in Hertz"
                    },
                    "languageCode": {
                      "type": "string",
                      "description": "ISO 639-1/639-2 language code"
                    },
                    "displayName": {
                      "type": "string",
                      "description": "Display name for the audio stream"
                    }
                  },
                  "textStream": {
                    "codec": {
                      "type": "string",
                      "description": "Text/subtitle codec to use"
                    },
                    "languageCode": {
                      "type": "string",
                      "description": "ISO 639-1/639-2 language code for subtitles"
                    },
                    "mapping": {
                      "type": "array",
                      "description": "Text stream mapping configuration",
                      "items": {
                        "type": "object"
                      }
                    },
                    "displayName": {
                      "type": "string",
                      "description": "Display name for the text stream"
                    }
                  }
                }
              }
            },
            "muxStreams": {
              "type": "array",
              "description": "Configuration for multiplexed output streams",
              "items": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "description": "Unique identifier for the muxed stream"
                  },
                  "fileName": {
                    "type": "string",
                    "description": "Output filename for the muxed stream"
                  },
                  "container": {
                    "type": "string",
                    "description": "Container format (e.g., MP4, MKV, HLS)"
                  },
                  "elementaryStreams": {
                    "type": "array",
                    "description": "List of elementary stream keys to include",
                    "items": {
                      "type": "string"
                    }
                  },
                  "segmentSettings": {
                    "type": "object",
                    "description": "Settings for stream segmentation",
                    "properties": {
                      "segmentDuration": {
                        "type": "string",
                        "description": "Duration of each segment"
                      },
                      "individualSegments": {
                        "type": "boolean",
                        "description": "Whether to create individual segment files"
                      }
                    }
                  },
                  "encryptionId": {
                    "type": "string",
                    "description": "ID of encryption configuration to apply"
                  },
                  "fmp4": {
                    "type": "object",
                    "description": "Fragmented MP4 specific settings",
                    "properties": {
                      "codecTag": {
                        "type": "string",
                        "description": "Codec tag for fMP4 container"
                      }
                    }
                  }
                }
              }
            },
            "manifests": {
              "type": "array",
              "description": "Configuration for streaming manifests",
              "items": {
                "type": "object",
                "properties": {
                  "fileName": {
                    "type": "string",
                    "description": "Name of the manifest file"
                  },
                  "type": {
                    "type": "string",
                    "description": "Manifest type (e.g., HLS, DASH)"
                  },
                  "muxStreams": {
                    "type": "array",
                    "description": "List of mux stream keys to include in manifest",
                    "items": {
                      "type": "string"
                    }
                  },
                  "dash": {
                    "type": "object",
                    "description": "DASH-specific settings",
                    "properties": {
                      "segmentReferenceScheme": {
                        "type": "string",
                        "description": "Scheme for referencing segments in manifest"
                      }
                    }
                  }
                }
              }
            },
            "output": {
              "type": "object",
              "description": "Output configuration",
              "properties": {
                "uri": {
                  "type": "string",
                  "description": "GCS URI for the output storage location"
                }
              }
            },
            "adBreaks": {
              "type": "array",
              "description": "Configuration for ad insertion points",
              "items": {
                "type": "object",
                "properties": {
                  "startTimeOffset": {
                    "type": "string",
                    "description": "Timestamp for ad break insertion"
                  }
                }
              }
            },
            "pubsubDestination": {
              "type": "object",
              "description": "Configuration for Pub/Sub notifications",
              "properties": {
                "topic": {
                  "type": "string",
                  "description": "The name of the Pub/Sub topic to publish notifications"
                }
              }
            },
            "spriteSheets": {
              "type": "array",
              "description": "Configuration for thumbnail sprite sheet generation",
              "items": {
                "type": "object",
                "properties": {
                  "format": {
                    "type": "string",
                    "description": "Image format for sprites (e.g., JPEG, PNG)"
                  },
                  "filePrefix": {
                    "type": "string",
                    "description": "Prefix for sprite sheet filenames"
                  },
                  "spriteWidthPixels": {
                    "type": "number",
                    "description": "Width of each sprite in pixels"
                  },
                  "spriteHeightPixels": {
                    "type": "number",
                    "description": "Height of each sprite in pixels"
                  },
                  "columnCount": {
                    "type": "number",
                    "description": "Number of sprites per row"
                  },
                  "rowCount": {
                    "type": "number",
                    "description": "Number of sprite rows"
                  },
                  "startTimeOffset": {
                    "type": "string",
                    "description": "Start time for sprite generation"
                  },
                  "endTimeOffset": {
                    "type": "string",
                    "description": "End time for sprite generation"
                  },
                  "quality": {
                    "type": "number",
                    "description": "Image quality (1-100)"
                  },
                  "totalCount": {
                    "type": "number",
                    "description": "Total number of sprites to generate"
                  },
                  "interval": {
                    "type": "string",
                    "description": "Time interval between sprites"
                  }
                }
              }
            },
            "overlays": {
              "type": "array",
              "description": "Configuration for video overlays",
              "items": {
                "type": "object",
                "properties": {
                  "image": {
                    "type": "object",
                    "description": "Image overlay settings",
                    "properties": {
                      "uri": {
                        "type": "string",
                        "description": "GCS URI of the overlay image"
                      },
                      "resolution": {
                        "type": "object",
                        "description": "Resolution settings for the overlay"
                      },
                      "alpha": {
                        "type": "number",
                        "description": "Opacity of the overlay (0-1)"
                      }
                    }
                  },
                  "animations": {
                    "type": "array",
                    "description": "List of animations to apply to overlay",
                    "items": {
                      "type": "object",
                      "properties": {
                        "animationStatic": {
                          "type": "object",
                          "description": "Static position animation settings"
                        },
                        "animationFade": {
                          "type": "object",
                          "description": "Fade animation settings"
                        },
                        "animationEnd": {
                          "type": "object",
                          "description": "End state animation settings"
                        }
                      }
                    }
                  }
                }
              }
            },
            "encryptions": {
              "type": "array",
              "description": "Configuration for content encryption",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Unique identifier for encryption configuration"
                  },
                  "drmSystems": {
                    "type": "object",
                    "description": "DRM system configuration"
                  },
                  "aes128": {
                    "type": "object",
                    "description": "AES-128 encryption settings"
                  },
                  "sampleAes": {
                    "type": "object",
                    "description": "Sample AES encryption settings"
                  },
                  "mpegCenc": {
                    "type": "object",
                    "description": "MPEG Common Encryption settings",
                    "properties": {
                      "schema": {
                        "type": "string",
                        "description": "MPEG-CENC schema version"
                      }
                    }
                  },
                  "secretManagerKeySource": {
                    "type": "object",
                    "description": "Google Cloud Secret Manager key configuration",
                    "properties": {
                      "secretVersion": {
                        "type": "string",
                        "description": "Version of the secret to use"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "labels": {
          "type": "array",
          "description": "User-defined labels for organizing and categorizing templates",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "gcsTranscodeGetJobDetailResponse": {
      "type": "object",
      "description": "Response schema for a Google Cloud Storage transcode job",
      "properties": {
        "name": {
          "type": "string",
          "description": "The unique name/identifier of the transcode job"
        },
        "inputUri": {
          "type": "string",
          "description": "The GCS URI of the input media file"
        },
        "outputUri": {
          "type": "string",
          "description": "The GCS URI where transcoded outputs will be stored"
        },
        "state": {
          "type": "string",
          "description": "Current state of the transcode job. Possible values: PROCESSING_STATE_UNSPECIFIED, PENDING, RUNNING, SUCCEEDED, FAILED"
        },
        "createTime": {
          "type": "string",
          "description": "Timestamp when the job was created",
          "format": "date-time"
        },
        "startTime": {
          "type": "string",
          "description": "Timestamp when the job started processing",
          "format": "date-time"
        },
        "endTime": {
          "type": "string",
          "description": "Timestamp when the job completed processing",
          "format": "date-time"
        },
        "ttlAfterCompletionDays": {
          "type": "number",
          "description": "Number of days after which the job resources will be automatically deleted",
          "minimum": 0
        },
        "labels": {
          "type": "object",
          "description": "User-defined labels for the job",
          "properties": {
            "test1": {
              "type": "string",
              "description": "Example label key-value pair"
            }
          },
          "additionalProperties": true
        },
        "error": {
          "type": "object",
          "description": "Error details if the job failed",
          "properties": {
            "code": {
              "type": "number",
              "description": "Error code number"
            },
            "message": {
              "type": "string",
              "description": "Human readable error message"
            },
            "details": {
              "type": "array",
              "description": "Additional error details",
              "items": {
                "type": "object",
                "properties": {
                  "@type": {
                    "type": "string",
                    "description": "Type of the error detail"
                  },
                  "customField1": {
                    "type": "any",
                    "description": "Custom error field"
                  }
                }
              }
            }
          }
        },
        "mode": {
          "type": "string",
          "description": "Processing mode of the job. Possible values: PROCESSING_MODE_UNSPECIFIED, PROCESSING_MODE_INTERACTIVE, PROCESSING_MODE_BATCH"
        },
        "batchModePriority": {
          "type": "number",
          "description": "Priority level for batch mode processing",
          "minimum": 0,
          "maximum": 100
        },
        "optimization": {
          "type": "string",
          "description": "Optimization strategy. Possible values: OPTIMIZATION_STRATEGY_UNSPECIFIED, AUTODETECT, DISABLED"
        },
        "templateId": {
          "type": "string",
          "description": "ID of the job template used"
        },
        "config": {
          "type": "object",
          "description": "Detailed configuration for the transcode job",
          "properties": {
            "inputs": {
              "type": "array",
              "description": "List of input configurations",
              "items": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "description": "Unique identifier for the input"
                  },
                  "uri": {
                    "type": "string",
                    "description": "GCS URI for input media file location"
                  },
                  "preprocessingConfig": {
                    "type": "object",
                    "description": "Pre-processing settings for the input",
                    "properties": {
                      "color": {
                        "type": "object",
                        "description": "Color correction settings"
                      },
                      "deniose": {
                        "type": "object",
                        "description": "Noise reduction settings"
                      },
                      "deblock": {
                        "type": "object",
                        "description": "Deblocking filter settings"
                      },
                      "audio": {
                        "type": "object",
                        "description": "Audio preprocessing settings"
                      },
                      "crop": {
                        "type": "object",
                        "description": "Video cropping settings"
                      },
                      "pad": {
                        "type": "object",
                        "description": "Video padding settings"
                      },
                      "deinterlace": {
                        "type": "object",
                        "description": "Deinterlacing settings",
                        "properties": {
                          "yadif": {
                            "type": "object",
                            "description": "Yet Another DeInterlacing Filter settings"
                          },
                          "bwdif": {
                            "type": "object",
                            "description": "Bob Weaver Deinterlacing Filter settings"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "editList": {
              "type": "array",
              "description": "List of edit decisions for content assembly",
              "items": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "description": "Unique identifier for the edit"
                  },
                  "inputs": {
                    "type": "array",
                    "description": "Input keys used in this edit",
                    "items": {
                      "type": "string"
                    }
                  },
                  "endTimeOffset": {
                    "type": "string",
                    "description": "End time of the edit segment"
                  },
                  "startTimeOffset": {
                    "type": "string",
                    "description": "Start time of the edit segment"
                  }
                }
              }
            },
            "elementaryStreams": {
              "type": "array",
              "description": "Configuration for individual media streams",
              "items": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "description": "Unique identifier for the stream"
                  },
                  "videoStream": {
                    "description": "Video codec configurations",
                    "h264": {
                      "type": "object",
                      "description": "H.264/AVC codec settings"
                    },
                    "h265": {
                      "type": "object",
                      "description": "H.265/HEVC codec settings"
                    },
                    "vp9": {
                      "type": "object",
                      "description": "VP9 codec settings"
                    }
                  },
                  "audioStream": {
                    "description": "Audio stream configuration",
                    "codec": {
                      "type": "string",
                      "description": "Audio codec type (e.g., AAC, MP3)"
                    },
                    "bitrateBps": {
                      "type": "number",
                      "description": "Audio bitrate in bits per second"
                    },
                    "channelCount": {
                      "type": "number",
                      "description": "Number of audio channels"
                    },
                    "channelLayout": {
                      "type": "array",
                      "description": "Channel layout configuration",
                      "items": {
                        "type": "string"
                      }
                    },
                    "mappings": {
                      "type": "array",
                      "description": "Audio channel mapping configuration",
                      "items": {
                        "type": "object"
                      }
                    },
                    "sampleHertz": {
                      "type": "string",
                      "description": "Audio sample rate in Hertz"
                    },
                    "languageCode": {
                      "type": "string",
                      "description": "ISO 639-1/639-2 language code"
                    },
                    "displayName": {
                      "type": "string",
                      "description": "Display name for the audio stream"
                    }
                  },
                  "textStream": {
                    "description": "Text/subtitle stream configuration",
                    "codec": {
                      "type": "string",
                      "description": "Text codec type (e.g., WebVTT, SRT)"
                    },
                    "languageCode": {
                      "type": "string",
                      "description": "ISO 639-1/639-2 language code"
                    },
                    "mapping": {
                      "type": "array",
                      "description": "Text track mapping configuration",
                      "items": {
                        "type": "object"
                      }
                    },
                    "displayName": {
                      "type": "string",
                      "description": "Display name for the text stream"
                    }
                  }
                }
              }
            },
            "muxStreams": {
              "type": "array",
              "description": "Output multiplexed stream configurations",
              "items": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "description": "Unique identifier for the muxed stream"
                  },
                  "fileName": {
                    "type": "string",
                    "description": "Output filename"
                  },
                  "container": {
                    "type": "string",
                    "description": "Container format (e.g., MP4, MKV, HLS)"
                  },
                  "elementaryStreams": {
                    "type": "array",
                    "description": "List of elementary stream keys to include",
                    "items": {
                      "type": "string"
                    }
                  },
                  "segmentSettings": {
                    "type": "object",
                    "description": "Settings for stream segmentation",
                    "properties": {
                      "segmentDuration": {
                        "type": "string",
                        "description": "Duration of each segment"
                      },
                      "individualSegments": {
                        "type": "boolean",
                        "description": "Whether to create individual segment files"
                      }
                    }
                  },
                  "encryptionId": {
                    "type": "string",
                    "description": "ID of encryption configuration to apply"
                  },
                  "fmp4": {
                    "type": "object",
                    "description": "Fragmented MP4 specific settings",
                    "properties": {
                      "codecTag": {
                        "type": "string",
                        "description": "Codec tag for FMPP4 container"
                      }
                    }
                  }
                }
              }
            },
            "manifests": {
              "type": "array",
              "description": "Streaming manifest configurations",
              "items": {
                "type": "object",
                "properties": {
                  "fileName": {
                    "type": "string",
                    "description": "Manifest filename"
                  },
                  "type": {
                    "type": "string",
                    "description": "Manifest type (e.g., HLS, DASH)"
                  },
                  "muxStreams": {
                    "type": "array",
                    "description": "List of muxed stream keys to include",
                    "items": {
                      "type": "string"
                    }
                  },
                  "dash": {
                    "type": "object",
                    "description": "DASH-specific settings",
                    "properties": {
                      "segmentReferenceScheme": {
                        "type": "string",
                        "description": "Segment reference scheme for DASH manifest"
                      }
                    }
                  }
                }
              }
            },
            "output": {
              "type": "object",
              "description": "Output configuration",
              "properties": {
                "uri": {
                  "type": "string",
                  "description": "GCS URI for output storage location"
                }
              }
            },
            "adBreaks": {
              "type": "array",
              "description": "Ad insertion points configuration",
              "items": {
                "type": "object",
                "properties": {
                  "startTimeOffset": {
                    "type": "string",
                    "description": "Timestamp for ad insertion point"
                  }
                }
              }
            },
            "pubsubDestination": {
              "type": "object",
              "description": "Google Cloud Pub/Sub notification configuration",
              "properties": {
                "topic": {
                  "type": "string",
                  "description": "The Pub/Sub topic name for job notifications"
                }
              }
            },
            "spriteSheets": {
              "type": "array",
              "description": "Thumbnail sprite sheet generation settings",
              "items": {
                "type": "object",
                "properties": {
                  "format": {
                    "type": "string",
                    "description": "Image format for sprites (e.g., JPEG, PNG)"
                  },
                  "filePrefix": {
                    "type": "string",
                    "description": "Prefix for sprite sheet filenames"
                  },
                  "spriteWidthPixels": {
                    "type": "number",
                    "description": "Width of each sprite in pixels"
                  },
                  "spriteHeightPixels": {
                    "type": "number",
                    "description": "Height of each sprite in pixels"
                  },
                  "columnCount": {
                    "type": "number",
                    "description": "Number of columns in sprite sheet"
                  },
                  "rowCount": {
                    "type": "number",
                    "description": "Number of rows in sprite sheet"
                  },
                  "startTimeOffset": {
                    "type": "string",
                    "description": "Start time for sprite generation"
                  },
                  "endTimeOffset": {
                    "type": "string",
                    "description": "End time for sprite generation"
                  },
                  "quality": {
                    "type": "number",
                    "description": "Image quality (0-100)",
                    "minimum": 0,
                    "maximum": 100
                  },
                  "totalCount": {
                    "type": "number",
                    "description": "Total number of sprites to generate"
                  },
                  "interval": {
                    "type": "string",
                    "description": "Time interval between sprites"
                  }
                }
              }
            },
            "overlays": {
              "type": "array",
              "description": "Video overlay configurations",
              "items": {
                "type": "object",
                "properties": {
                  "image": {
                    "type": "object",
                    "description": "Image overlay settings",
                    "properties": {
                      "uri": {
                        "type": "string",
                        "description": "GCS URI of overlay image"
                      },
                      "resolution": {
                        "type": "object",
                        "description": "Resolution of overlay image"
                      },
                      "alpha": {
                        "type": "number",
                        "description": "Opacity of overlay (0-1)",
                        "minimum": 0,
                        "maximum": 1
                      }
                    }
                  },
                  "animations": {
                    "type": "array",
                    "description": "Animation settings for overlay",
                    "items": {
                      "type": "object",
                      "properties": {
                        "animationStatic": {
                          "type": "object",
                          "description": "Static position animation"
                        },
                        "animationFade": {
                          "type": "object",
                          "description": "Fade animation settings"
                        },
                        "animationEnd": {
                          "type": "object",
                          "description": "End state animation"
                        }
                      }
                    }
                  }
                }
              }
            },
            "encryptions": {
              "type": "array",
              "description": "Content encryption configurations",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Unique identifier for encryption config"
                  },
                  "drmSystems": {
                    "type": "object",
                    "description": "DRM system configurations"
                  },
                  "aes128": {
                    "type": "object",
                    "description": "AES-128 encryption settings"
                  },
                  "sampleAes": {
                    "type": "object",
                    "description": "Sample AES encryption settings"
                  },
                  "mpegCenc": {
                    "type": "object",
                    "description": "MPEG Common Encryption settings",
                    "properties": {
                      "schema": {
                        "type": "string",
                        "description": "MPEG-CENC schema version"
                      }
                    }
                  },
                  "secretManagerKeySource": {
                    "type": "object",
                    "description": "Google Cloud Secret Manager key configuration",
                    "properties": {
                      "secretVersion": {
                        "type": "string",
                        "description": "Version of the secret to use"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "videoIndexerAnalyzeSingleFileRequest": {
      "type": "object",
      "properties": {
        "response": {
          "type": "object",
          "properties": {
            "taskId": {
              "type": "string"
            },
            "filePath": {
              "type": "string"
            }
          }
        }
      }
    },
    "videoIndexerAnalyzeFolderRequest": {
      "type": "object",
      "properties": {
        "response": {
          "type": "object",
          "properties": {
            "taskId": {
              "type": "string"
            },
            "filePaths": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "computerVisionAnalyzeSingleFileRequest": {
      "type": "object",
      "properties": {
        "response": {
          "type": "object",
          "properties": {
            "taskId": {
              "type": "string"
            },
            "analysisType": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "filePath": {
              "type": "string"
            }
          }
        }
      }
    },
    "computerVisionAnalyzeFolderRequest": {
      "type": "object",
      "properties": {
        "response": {
          "type": "object",
          "properties": {
            "taskId": {
              "type": "string"
            },
            "analysisType": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "filePaths": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "azureDocumentAIAnalyzeSingleFileRequest": {
      "type": "object",
      "properties": {
        "response": {
          "type": "object",
          "properties": {
            "taskId": {
              "type": "string"
            },
            "analysisType": {
              "type": "string"
            },
            "filePath": {
              "type": "string"
            }
          }
        }
      }
    },
    "azureDocumentAIAnalyzeFolderRequest": {
      "type": "object",
      "properties": {
        "response": {
          "type": "object",
          "properties": {
            "taskId": {
              "type": "string"
            },
            "processor": {
              "type": "string"
            },
            "filePaths": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "revAIAnalyzeSingleFileRequest": {
      "type": "object",
      "properties": {
        "response": {
          "type": "object",
          "properties": {
            "taskId": {
              "type": "string"
            },
            "provider": {
              "type": "string"
            },
            "bucketName": {
              "type": "string"
            },
            "filePath": {
              "type": "string"
            }
          }
        }
      }
    },
    "revAIAnalyzeFolderRequest": {
      "type": "object",
      "properties": {
        "response": {
          "type": "object",
          "properties": {
            "taskId": {
              "type": "string"
            },
            "provider": {
              "type": "string"
            },
            "bucketName": {
              "type": "string"
            },
            "filePaths": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "twelveLabsTextProcessingSingleFileRequest": {
      "type": "object",
      "properties": {
        "response": {
          "type": "object",
          "properties": {
            "taskId": {
              "type": "string"
            },
            "provider": {
              "type": "string"
            },
            "bucketName": {
              "type": "string"
            },
            "filePath": {
              "type": "string"
            }
          }
        }
      }
    },
    "twelveLabsTextProcessingFolderRequest": {
      "type": "object",
      "properties": {
        "response": {
          "type": "object",
          "properties": {
            "taskId": {
              "type": "string"
            },
            "provider": {
              "type": "string"
            },
            "bucketName": {
              "type": "string"
            },
            "filePaths": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "twelveLabIndexResponse": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "format": "ObjectId"
        },
        "index_name": {
          "type": "string"
        },
        "engines": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "engine_name": {
                "type": "string"
              },
              "engine_options": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "finetuned": {
                "type": "boolean"
              }
            },
            "required": [
              "engine_name",
              "engine_options",
              "finetuned"
            ]
          }
        },
        "video_count": {
          "type": "number"
        },
        "total_duration": {
          "type": "number"
        },
        "addons": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "created_at": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "expires_at": {
          "type": "string"
        }
      }
    },
    "twelveLabVideoResponse": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "indexed_at": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "properties": {
            "audio_channel": {
              "type": "number"
            },
            "audio_length_ns": {
              "type": "number"
            },
            "audio_sample_rate": {
              "type": "number"
            },
            "audio_stream_id": {
              "type": "string"
            },
            "audio_stream_idx": {
              "type": "number"
            },
            "duration": {
              "type": "number"
            },
            "engine_ids": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "filename": {
              "type": "string"
            },
            "fps": {
              "type": "number"
            },
            "height": {
              "type": "number"
            },
            "size": {
              "type": "number"
            },
            "video_length_ns": {
              "type": "number"
            },
            "video_stream_id": {
              "type": "string"
            },
            "video_stream_idx": {
              "type": "number"
            },
            "width": {
              "type": "number"
            }
          }
        }
      }
    },
    "twelveLabQueryResponse": {
      "type": "object",
      "properties": {
        "response": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "clips": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "score": {
                      "type": "number"
                    },
                    "start": {
                      "type": "number"
                    },
                    "end": {
                      "type": "number"
                    },
                    "metadata": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "key": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "videoId": {
                      "type": "string"
                    },
                    "confidence": {
                      "type": "string"
                    },
                    "thumbnailUrl": {
                      "type": "string"
                    },
                    "modules": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string"
                          },
                          "confidence": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "twelveLabClassificationResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "videoId": {
                "type": "string",
                "description": "Id of video"
              },
              "classes": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "name of class"
                    },
                    "score": {
                      "type": "number",
                      "description": "Amount of match"
                    },
                    "durationRatio": {
                      "type": "number"
                    },
                    "detailedScores": {
                      "type": "object",
                      "properties": {
                        "maxScore": {
                          "type": "number"
                        },
                        "avgScore": {
                          "type": "number"
                        },
                        "normalizeScore": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "singleFileAnalyzeResponse": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string"
        },
        "taskId": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "bucketName": {
          "type": "string"
        },
        "objectKey": {
          "type": "string"
        },
        "resultPath": {
          "type": "string"
        },
        "error": {
          "type": "string"
        },
        "createdAt": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        }
      }
    },
    "folderAnalyzeResponse": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string"
        },
        "jobGuid": {
          "type": "string"
        },
        "taskId": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "bucketName": {
          "type": "string"
        },
        "objectKey": {
          "type": "string"
        },
        "resultPath": {
          "type": "string"
        },
        "error": {
          "type": "string"
        },
        "createdAt": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "childJobs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/childJobResponse"
          }
        }
      }
    },
    "mediaConvertTemplateResponseTemplate": {
      "type": "object",
      "properties": {
        "$metadata": {
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "type": "number"
            },
            "requestId": {
              "type": "string"
            },
            "attempts": {
              "type": "number"
            },
            "totalRetryDelay": {
              "type": "number"
            }
          }
        },
        "JobTemplates": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "AccelerationSettings": {
                "type": "object",
                "properties": {
                  "Mode": {
                    "type": "string"
                  }
                }
              },
              "Arn": {
                "type": "string"
              },
              "Category": {
                "type": "string"
              },
              "CreatedAt": {
                "type": "string",
                "format": "date"
              },
              "Description": {
                "type": "string"
              },
              "HopDestinations": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "Priority": {
                      "type": "number"
                    },
                    "Queue": {
                      "type": "string"
                    },
                    "WaitMinutes": {
                      "type": "number"
                    }
                  }
                }
              },
              "LastUpdated": {
                "type": "string",
                "format": "date"
              },
              "Name": {
                "type": "string"
              },
              "Priority": {
                "type": "number"
              },
              "Queue": {
                "type": "string"
              },
              "Settings": {
                "type": "object",
                "properties": {
                  "AdAvailOffset": {
                    "type": "number"
                  },
                  "AvailBlanking": {
                    "type": "object"
                  },
                  "ColorConversion3DLUTSettings": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    }
                  },
                  "Esam": {
                    "type": "object"
                  },
                  "ExtendedDataServices": {
                    "type": "object"
                  },
                  "FollowSource": {
                    "type": "number"
                  },
                  "Inputs": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "AdvancedInputFilter": {
                          "type": "string"
                        },
                        "AdvancedInputFilteringSettings": {
                          "type": "object"
                        },
                        "AudioSelectorGroups": {
                          "type": "object"
                        },
                        "AudioSelectors": {
                          "type": "object"
                        },
                        "CaptionSelectors": {
                          "type": "object"
                        },
                        "Crop": {
                          "type": "object"
                        },
                        "DeblockFilter": {
                          "type": "string"
                        },
                        "DenoiseFilter": {
                          "type": "string"
                        },
                        "DolbyVisionMetadataXml": {
                          "type": "string"
                        },
                        "FilterEnable": {
                          "type": "string"
                        },
                        "FilterStrength": {
                          "type": "number"
                        },
                        "ImageInserter": {
                          "type": "string"
                        },
                        "InputClippings": {
                          "type": "array",
                          "items": {
                            "type": "object"
                          }
                        },
                        "InputScanType": {
                          "type": "string"
                        },
                        "Position": {
                          "type": "object"
                        },
                        "ProgramNumber": {
                          "type": "number"
                        },
                        "PsiControl": {
                          "type": "string"
                        },
                        "TimecodeSource": {
                          "type": "string"
                        },
                        "TimecodeStart": {
                          "type": "string"
                        },
                        "VideoOverlays": {
                          "type": "array",
                          "items": {
                            "type": "object"
                          }
                        },
                        "VideoSelectors": {
                          "type": "object"
                        }
                      }
                    }
                  },
                  "KantarWatermark": {
                    "type": "object"
                  },
                  "MotionImageInserter": {
                    "type": "object"
                  },
                  "NielsenConfiguration": {
                    "type": "object"
                  },
                  "NielsenNonLinearWatermark": {
                    "type": "object"
                  },
                  "OutputGroups": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "AutomatedEncodingSettings": {
                          "type": "object",
                          "properties": {
                            "AbrSettings": {
                              "type": "object"
                            }
                          }
                        },
                        "CustomName": {
                          "type": "string"
                        },
                        "Name": {
                          "type": "string"
                        },
                        "OutputGroupSettings": {
                          "type": "object",
                          "properties": {
                            "CmafGroupSettings": {
                              "type": "object"
                            },
                            "DashIsoGroupSettings": {
                              "type": "object"
                            },
                            "FileGroupSettings": {
                              "type": "object"
                            },
                            "HlsGroupSettings": {
                              "type": "object"
                            },
                            "MsSmoothGroupSettings": {
                              "type": "object"
                            },
                            "Type": {
                              "type": "string"
                            }
                          }
                        },
                        "Outputs": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "AudioDescriptions": {
                                "type": "array",
                                "items": {
                                  "type": "object"
                                }
                              },
                              "CaptionDescriptions": {
                                "type": "array",
                                "items": {
                                  "type": "object"
                                }
                              },
                              "ContainerSettings": {
                                "type": "object"
                              },
                              "Extension": {
                                "type": "string"
                              },
                              "NameModifier": {
                                "type": "string"
                              },
                              "OutputGroupSettings": {
                                "type": "object"
                              },
                              "Preset": {
                                "type": "string"
                              },
                              "VideoDescription": {
                                "type": "object"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "TimecodeConfig": {
                    "type": "object"
                  },
                  "TimedMetadatInsertion": {
                    "type": "object"
                  }
                }
              },
              "StatusUpdateInterval": {
                "type": "string"
              },
              "Type": {
                "type": "string"
              }
            }
          }
        },
        "NextToken": {
          "type": "string"
        }
      }
    },
    "mediaConvertJobResponseTemplate": {
      "type": "object",
      "properties": {
        "$metadata": {
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "type": "number"
            },
            "requestId": {
              "type": "string"
            },
            "attempts": {
              "type": "number"
            },
            "totalRetryDelay": {
              "type": "number"
            }
          }
        },
        "Jobs": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "AccelerationSettings": {
                "type": "object",
                "properties": {
                  "Mode": {
                    "type": "string"
                  }
                }
              },
              "AccelerationStatus": {
                "type": "string"
              },
              "Arn": {
                "type": "string"
              },
              "BillingTagSource": {
                "type": "string"
              },
              "ClientRequestToken": {
                "type": "string"
              },
              "CreatedAt": {
                "type": "string",
                "format": "date"
              },
              "CurrentPhase": {
                "type": "string"
              },
              "ErrorCode": {
                "type": "number"
              },
              "ErrorMessage": {
                "type": "string"
              },
              "HopDestinations": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "Priority": {
                      "type": "number"
                    },
                    "Queue": {
                      "type": "string"
                    },
                    "WaitMinutes": {
                      "type": "number"
                    }
                  }
                }
              },
              "Id": {
                "type": "string"
              },
              "JobEngineVersionRequested": {
                "type": "string"
              },
              "JobEngineVersionUsed": {
                "type": "string"
              },
              "JobPercentComplete": {
                "type": "number"
              },
              "JobTemplate": {
                "type": "string"
              },
              "Messages": {
                "type": "object",
                "properties": {
                  "Info": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "Warning": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "OutputGroupDetails": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "OutputDetails": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "DurationInMs": {
                            "type": "number"
                          },
                          "VideoDetails": {
                            "type": "object",
                            "properties": {
                              "HeightInPx": {
                                "type": "number"
                              },
                              "WidthInPx": {
                                "type": "number"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "Priority": {
                "type": "number"
              },
              "Queue": {
                "type": "string"
              },
              "QueueTransitions": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "DestinationQueue": {
                      "type": "string"
                    },
                    "SourceQueue": {
                      "type": "string"
                    },
                    "Timestamp": {
                      "type": "string",
                      "format": "date"
                    }
                  }
                }
              },
              "RetryCount": {
                "type": "number"
              },
              "Role": {
                "type": "string"
              },
              "Settings": {
                "type": "object"
              },
              "SimulateReservedQueue": {
                "type": "string"
              },
              "Status": {
                "type": "string"
              },
              "StatusUpdateInterval": {
                "type": "string"
              },
              "Timing": {
                "type": "object",
                "properties": {
                  "FinishTime": {
                    "type": "string",
                    "format": "date"
                  },
                  "StartTime": {
                    "type": "string",
                    "format": "date"
                  },
                  "SubmitTime": {
                    "type": "string",
                    "format": "date"
                  }
                }
              },
              "UserMetadata": {
                "type": "object"
              },
              "Warnings": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "Code": {
                      "type": "number"
                    },
                    "Count": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "NextToken": {
          "type": "string"
        }
      }
    },
    "mediaConvertPresetResponseTemplate": {
      "type": "object",
      "properties": {
        "$metadata": {
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "type": "number"
            },
            "requestId": {
              "type": "string"
            },
            "attempts": {
              "type": "number"
            },
            "totalRetryDelay": {
              "type": "number"
            }
          }
        },
        "Presets": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "Arn": {
                "type": "string"
              },
              "Category": {
                "type": "string"
              },
              "CreatedAt": {
                "type": "string",
                "format": "date"
              },
              "Description": {
                "type": "string"
              },
              "LastUpdated": {
                "type": "string",
                "format": "date"
              },
              "Name": {
                "type": "string"
              },
              "Settings": {
                "type": "object",
                "properties": {
                  "AudioDescriptions": {
                    "type": "array",
                    "items": {
                      "AudioChannelTaggingSettings": {
                        "type": "object"
                      }
                    }
                  },
                  "CaptionDescriptions": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "CustomLanguageCode": {
                        "type": "string"
                      },
                      "DestinationSettings": {
                        "type": "object"
                      },
                      "LanguageCode": {
                        "type": "string"
                      },
                      "LanguageDescription": {
                        "type": "string"
                      }
                    }
                  },
                  "ContainerSettings": {
                    "type": "object",
                    "properties": {
                      "CmfcSettings": {
                        "type": "object"
                      },
                      "Container": {
                        "type": "string"
                      },
                      "F4vSettings": {
                        "type": "object"
                      },
                      "M2tsSettings": {
                        "type": "object"
                      },
                      "M3u8Settings": {
                        "type": "object"
                      },
                      "MovSettings": {
                        "type": "object"
                      },
                      "Mp4Settings": {
                        "type": "object"
                      },
                      "MpdSettings": {
                        "type": "object"
                      },
                      "MxfSettings": {
                        "type": "object"
                      }
                    }
                  },
                  "VideoDescriptions": {
                    "type": "object",
                    "properties": {
                      "AfdSignaling": {
                        "type": "string"
                      },
                      "AntiAlias": {
                        "type": "string"
                      },
                      "CodecSettings": {
                        "type": "object"
                      },
                      "ColorMetadata": {
                        "type": "string"
                      },
                      "Crop": {
                        "type": "object"
                      },
                      "DropFrameTimecode": {
                        "type": "string"
                      },
                      "FixedAfd": {
                        "type": "number"
                      },
                      "Height": {
                        "type": "number"
                      },
                      "Position": {
                        "type": "object"
                      },
                      "RespondToAfd": {
                        "type": "string"
                      },
                      "ScalingBehavior": {
                        "type": "string"
                      },
                      "Sharpness": {
                        "type": "number"
                      },
                      "TimecodeInsertion": {
                        "type": "string"
                      },
                      "VideoProcessors": {
                        "type": "object"
                      },
                      "Width": {
                        "type": "number"
                      }
                    }
                  }
                }
              },
              "Type": {
                "type": "string"
              }
            }
          }
        },
        "NextToken": {
          "type": "string"
        }
      }
    },
    "awsTestConfig": {
      "type": "object",
      "properties": {
        "s3Access": {
          "type": "object",
          "properties": {
            "accessibleBuckets": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "inAccessibleBuckets": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "rekognitionAccess": {
          "type": "boolean"
        },
        "mediaConvertAccess": {
          "type": "boolean"
        }
      }
    },
    "azureTestConfig": {
      "type": "object",
      "properties": {
        "containerAccess": {
          "type": "object",
          "properties": {
            "accessibleContainers": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "inAccessibleContainers": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "videoIndexerAccess": {
          "type": "boolean"
        },
        "computerVisionAccess": {
          "type": "boolean"
        },
        "documentIntelligenceAccess": {
          "type": "boolean"
        }
      }
    },
    "gcsTestConfig": {
      "type": "object",
      "properties": {
        "storageAccess": {
          "type": "object",
          "properties": {
            "accessibleBuckets": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "inAccessibleBuckets": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "visionAIAccess": {
          "type": "boolean"
        },
        "videoIntelligenceAccess": {
          "type": "boolean"
        },
        "documentAIAccess": {
          "type": "boolean"
        }
      }
    },
    "revAiTestConfig": {
      "type": "object",
      "properties": {
        "revAiAccess": {
          "type": "boolean"
        }
      }
    },
    "twelveLabTestConfig": {
      "type": "object",
      "properties": {
        "twelveLabAccess": {
          "type": "boolean"
        }
      }
    },
    "configuration": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "provider": {
          "type": "string"
        },
        "configurationFields": {
          "type": "object"
        },
        "mode": {
          "type": "string"
        },
        "_id": {
          "type": "string"
        },
        "createdAt": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        }
      }
    },
    "processor": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "location": {
          "type": "string"
        }
      }
    }
  }
}